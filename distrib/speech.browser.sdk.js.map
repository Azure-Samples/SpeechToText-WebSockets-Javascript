{"version":3,"sources":["src/common/Guid.ts","src/common/PlatformEvent.ts","src/common/AudioSourceEvents.ts","src/common/Error.ts","src/common/ConnectionMessage.ts","src/common/ConnectionEvents.ts","src/common/ConnectionOpenResponse.ts","src/common/EventSource.ts","src/common/Events.ts","src/common/Promise.ts","src/common/List.ts","src/common/Queue.ts","src/common/Stream.ts","src/common/IConnection.ts","src/common/InMemoryStorage.ts","src/common/RawWebsocketMessage.ts","src/common/RiffPcmEncoder.ts","src/common/Storage.ts","src/common/Exports.ts","src/common.browser/ConsoleLoggingListener.ts","src/common.browser/LocalStorage.ts","src/common.browser/MicAudioSource.ts","src/common.browser/OpusRecorder.ts","src/common.browser/PCMRecorder.ts","src/common.browser/SessionStorage.ts","src/common.browser/Timer.ts","src/common.browser/WebsocketMessageAdapter.ts","src/common.browser/WebsocketConnection.ts","src/common.browser/Exports.ts","src/sdk/speech/IAuthentication.ts","src/sdk/speech/CognitiveSubscriptionKeyAuthentication.ts","src/sdk/speech/CognitiveTokenAuthentication.ts","src/sdk/speech/RecognizerConfig.ts","src/sdk/speech/SpeechResults.ts","src/sdk/speech/RecognitionEvents.ts","src/sdk/speech/ServiceTelemetryListener.Internal.ts","src/sdk/speech/SpeechConnectionMessage.Internal.ts","src/sdk/speech/Recognizer.ts","src/sdk/speech/WebsocketMessageFormatter.ts","src/sdk/speech/Exports.ts","src/sdk/speech.browser/SpeechConnectionFactory.ts","src/sdk/speech.browser/Recognizer.ts","src/sdk/speech.browser/Exports.ts","Speech.Browser.Sdk.ts"],"names":[],"mappings":"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","file":"speech.browser.sdk.js","sourcesContent":["\nconst CreateGuid: () => string = (): string => {\n    let d = new Date().getTime();\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n\n    return guid;\n};\n\nconst CreateNoDashGuid: () => string = (): string => {\n    return CreateGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\n};\n\nexport { CreateGuid, CreateNoDashGuid };\n","import { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum EventType {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n\nexport class PlatformEvent {\n    private name: string;\n    private eventId: string;\n    private eventTime: string;\n    private eventType: EventType;\n    private metadata: IStringDictionary<string>;\n\n    constructor(eventName: string, eventType: EventType) {\n        this.name = eventName;\n        this.eventId = CreateNoDashGuid();\n        this.eventTime = new Date().toISOString();\n        this.eventType = eventType;\n        this.metadata = { };\n    }\n\n    public get Name(): string {\n        return this.name;\n    }\n\n    public get EventId(): string {\n        return this.eventId;\n    }\n\n    public get EventTime(): string {\n        return this.eventTime;\n    }\n\n    public get EventType(): EventType {\n        return this.eventType;\n    }\n\n    public get Metadata(): IStringDictionary<string> {\n        return this.metadata;\n    }\n}\n","import { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class AudioSourceEvent extends PlatformEvent {\n    private audioSourceId: string;\n\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.audioSourceId = audioSourceId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceReadyEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceOffEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceOffEvent\", audioSourceId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\n    private error: string;\n    constructor(audioSourceId: string, error: string) {\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\n        this.error = error;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\n    private audioNodeId: string;\n\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\n        super(eventName, audioSourceId);\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\n    private error: string;\n\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\n        this.error = error;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n","\n/**\n * The error that is thrown when an argument passed in is null.\n *\n * @export\n * @class ArgumentNullError\n * @extends {Error}\n */\nexport class ArgumentNullError extends Error {\n\n    /**\n     * Creates an instance of ArgumentNullError.\n     *\n     * @param {string} argumentName Name of the argument that is null\n     *\n     * @memberOf ArgumentNullError\n     */\n    public constructor(argumentName: string) {\n        super(argumentName);\n        this.name = \"ArgumentNull\";\n        this.message = argumentName;\n    }\n}\n\n/**\n * The error that is thrown when an invalid operation is performed in the code.\n *\n * @export\n * @class InvalidOperationError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class InvalidOperationError extends Error {\n\n    /**\n     * Creates an instance of InvalidOperationError.\n     *\n     * @param {string} error The error\n     *\n     * @memberOf InvalidOperationError\n     */\n    public constructor(error: string) {\n        super(error);\n        this.name = \"InvalidOperation\";\n        this.message = error;\n    }\n}\n\n/**\n * The error that is thrown when an object is disposed.\n *\n * @export\n * @class ObjectDisposedError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ObjectDisposedError extends Error {\n\n    /**\n     * Creates an instance of ObjectDisposedError.\n     *\n     * @param {string} objectName The object that is disposed\n     * @param {string} error The error\n     *\n     * @memberOf ObjectDisposedError\n     */\n    public constructor(objectName: string, error?: string) {\n        super(error);\n        this.name = objectName + \"ObjectDisposed\";\n        this.message = error;\n    }\n}\n","import { InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum MessageType {\n    Text,\n    Binary,\n}\n\nexport class ConnectionMessage {\n\n    private messageType: MessageType;\n    private headers: IStringDictionary<string>;\n    private body: any = null;\n\n    private id: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        this.messageType = messageType;\n        this.body = body;\n        this.headers = headers ? headers : {};\n        this.id = id ? id : CreateNoDashGuid();\n    }\n\n    public get MessageType(): MessageType {\n        return this.messageType;\n    }\n\n    public get Headers(): any {\n        return this.headers;\n    }\n\n    public get Body(): any {\n        return this.body;\n    }\n\n    public get TextBody(): string {\n        if (this.messageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.body as string;\n    }\n\n    public get BinaryBody(): ArrayBuffer {\n        if (this.messageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.body;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n}\n","import { ConnectionMessage } from \"./ConnectionMessage\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class ConnectionEvent extends PlatformEvent {\n    private connectionId: string;\n\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.connectionId = connectionId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionStartEvent extends ConnectionEvent {\n    private uri: string;\n    private headers: IStringDictionary<string>;\n\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\n        super(\"ConnectionStartEvent\", connectionId);\n        this.uri = uri;\n        this.headers = headers;\n    }\n\n    public get Uri(): string {\n        return this.uri;\n    }\n\n    public get Headers(): IStringDictionary<string> {\n        return this.headers;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\n        super(\"ConnectionEstablishedEvent\", connectionId);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionClosedEvent extends ConnectionEvent {\n    private reason: string;\n    private statusCode: number;\n\n    constructor(connectionId: string, statusCode: number, reason: string) {\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Warning);\n        this.reason = reason;\n        this.statusCode = statusCode;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n    private statusCode: number;\n    private reason: string;\n\n    constructor(connectionId: string, statuscode: number, reason: string) {\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n        this.statusCode = statuscode;\n        this.reason = reason;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n    private networkReceivedTime: string;\n    private message: ConnectionMessage;\n\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\n        this.networkReceivedTime = networkReceivedTimeISO;\n        this.message = message;\n    }\n\n    public get NetworkReceivedTime(): string {\n        return this.networkReceivedTime;\n    }\n\n    public get Message(): ConnectionMessage {\n        return this.message;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n    private networkSentTime: string;\n    private message: ConnectionMessage;\n\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageSentEvent\", connectionId);\n        this.networkSentTime = networkSentTimeISO;\n        this.message = message;\n    }\n\n    public get NetworkSentTime(): string {\n        return this.networkSentTime;\n    }\n\n    public get Message(): ConnectionMessage {\n        return this.message;\n    }\n}\n","\nexport class ConnectionOpenResponse {\n    private statusCode: number;\n    private reason: string;\n\n    constructor(statusCode: number, reason: string) {\n        this.statusCode = statusCode;\n        this.reason = reason;\n    }\n\n    public get StatusCode(): number {\n        return this.statusCode;\n    }\n\n    public get Reason(): string {\n        return this.reason;\n    }\n}\n","import { ObjectDisposedError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IEventListener, IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\n    private metadata: IStringDictionary<string>;\n    private isDisposed: boolean = false;\n\n    constructor(metadata?: IStringDictionary<string>) {\n        this.metadata = metadata;\n    }\n\n    public OnEvent = (event: TEvent): void => {\n        if (this.IsDisposed()) {\n            throw (new ObjectDisposedError(\"EventSource\"));\n        }\n\n        if (this.Metadata) {\n            for (const paramName in this.Metadata) {\n                if (paramName) {\n                    if (event.Metadata) {\n                        if (!event.Metadata[paramName]) {\n                            event.Metadata[paramName] = this.Metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const eventId in this.eventListeners) {\n            if (eventId && this.eventListeners[eventId]) {\n                this.eventListeners[eventId](event);\n            }\n        }\n    }\n\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\n        const id = CreateNoDashGuid();\n        this.eventListeners[id] = onEventCallback;\n        return {\n            Detach: () => {\n                delete this.eventListeners[id];\n            },\n        };\n    }\n\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\n        return this.Attach(listener.OnEvent);\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.isDisposed;\n    }\n\n    public Dispose = (): void => {\n        this.eventListeners = null;\n        this.isDisposed = true;\n    }\n\n    public get Metadata(): IStringDictionary<string> {\n        return this.metadata;\n    }\n}\n","import { ArgumentNullError } from \"./Error\";\nimport { EventSource } from \"./EventSource\";\nimport { IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class Events {\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\n\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\n        if (!eventSource) {\n            throw new ArgumentNullError(\"eventSource\");\n        }\n\n        Events.instance = eventSource;\n    }\n\n    public static get Instance(): IEventSource<PlatformEvent> {\n        return Events.instance;\n    }\n}\n","import { ArgumentNullError  } from \"./Error\";\n\nexport enum PromiseState {\n    None,\n    Resolved,\n    Rejected,\n}\n\nexport interface IPromise<T> {\n    Result(): PromiseResult<T>;\n\n    ContinueWith<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\n\n    ContinueWithPromise<TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    OnSuccessContinueWith<TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\n\n    OnSuccessContinueWithPromise<TContinuationResult>(\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\n\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\n\n    Finally(callback: () => void): IPromise<T>;\n}\n\nexport interface IDeferred<T> {\n    State(): PromiseState;\n\n    Promise(): IPromise<T>;\n\n    Resolve(result: T): IDeferred<T>;\n\n    Reject(error: string): IDeferred<T>;\n}\n\nexport class PromiseResult<T> {\n    protected isCompleted: boolean;\n    protected isError: boolean;\n    protected error: string;\n    protected result: T;\n\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\n        promiseResultEventSource.On((result: T) => {\n            if (!this.isCompleted) {\n                this.isCompleted = true;\n                this.isError = false;\n                this.result = result;\n            }\n        }, (error: string) => {\n            if (!this.isCompleted) {\n                this.isCompleted = true;\n                this.isError = true;\n                this.error = error;\n            }\n        });\n    }\n\n    public get IsCompleted(): boolean {\n        return this.isCompleted;\n    }\n\n    public get IsError(): boolean {\n        return this.isError;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n\n    public get Result(): T {\n        return this.result;\n    }\n\n    public ThrowIfError = (): void => {\n        if (this.IsError) {\n            throw this.Error;\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseResultEventSource<T>  {\n\n    private onSetResult: (result: T) => void;\n    private onSetError: (error: string) => void;\n\n    public SetResult = (result: T): void => {\n        this.onSetResult(result);\n    }\n\n    public SetError = (error: string): void => {\n        this.onSetError(error);\n    }\n\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\n        this.onSetResult = onSetResult;\n        this.onSetError = onSetError;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class PromiseHelper {\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\n        if (!promises || promises.length === 0) {\n            throw new ArgumentNullError(\"promises\");\n        }\n\n        const deferred = new Deferred<boolean>();\n        const errors: string[] = [];\n        let completedPromises: number = 0;\n\n        const checkForCompletion = () => {\n            completedPromises++;\n            if (completedPromises === promises.length) {\n                if (errors.length === 0) {\n                    deferred.Resolve(true);\n                } else {\n                    deferred.Reject(errors.join(\", \"));\n                }\n            }\n        };\n\n        for (const promise of promises) {\n            promise.On((r: any) => {\n                checkForCompletion();\n            }, (e: string) => {\n                errors.push(e);\n                checkForCompletion();\n            });\n        }\n\n        return deferred.Promise();\n    }\n\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.Resolve(result);\n        return deferred.Promise();\n    }\n\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\n        const deferred = new Deferred<TResult>();\n        deferred.Reject(error);\n        return deferred.Promise();\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Promise<T> implements IPromise<T> {\n\n    private sink: Sink<T>;\n\n    public constructor(sink: Sink<T>) {\n        this.sink = sink;\n    }\n\n    public Result = (): PromiseResult<T> => {\n        return this.sink.Result;\n    }\n\n    public ContinueWith = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\n                    continuationDeferral.Resolve(coninuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                try {\n                    const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\n                    continuationDeferral.Resolve(coninuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public OnSuccessContinueWith = <TContinuationResult>(\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const coninuationResult: TContinuationResult = continuationCallback(r);\n                    continuationDeferral.Resolve(coninuationResult);\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}'`);\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public ContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\n                    if (!continuationPromise) {\n                        throw new Error(\"'Contuniation callback did not return promise'\");\n                    }\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(coninuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\n                    if (!continuationPromise) {\n                        throw new Error(\"Contuniation callback did not return promise\");\n                    }\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(coninuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n                }\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\n\n        if (!continuationCallback) {\n            throw new ArgumentNullError(\"continuationCallback\");\n        }\n\n        const continuationDeferral = new Deferred<TContinuationResult>();\n\n        this.sink.on(\n            (r: T) => {\n                try {\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\n                    if (!continuationPromise) {\n                        throw new Error(\"Contuniation callback did not return promise\");\n                    }\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\n                        continuationDeferral.Resolve(coninuationResult);\n                    }, (e: string) => {\n                        continuationDeferral.Reject(e);\n                    });\n                } catch (e) {\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\n                }\n            },\n            (error: string) => {\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}.'`);\n            },\n        );\n\n        return continuationDeferral.Promise();\n    }\n\n    public On = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): Promise<T> => {\n        if (!successCallback) {\n            throw new ArgumentNullError(\"successCallback\");\n        }\n\n        if (!errorCallback) {\n            throw new ArgumentNullError(\"errorCallback\");\n        }\n\n        this.sink.on(successCallback, errorCallback);\n        return this;\n    }\n\n    public Finally = (callback: () => void): Promise<T> => {\n        if (!callback) {\n            throw new ArgumentNullError(\"callback\");\n        }\n\n        const callbackWrapper = (_: any) => {\n            callback();\n        };\n\n        return this.On(callbackWrapper, callbackWrapper);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Deferred<T> implements IDeferred<T> {\n\n    private promise: Promise<T>;\n    private sink: Sink<T>;\n\n    public constructor() {\n        this.sink = new Sink<T>();\n        this.promise = new Promise<T>(this.sink);\n    }\n\n    public State = (): PromiseState => {\n        return this.sink.State;\n    }\n\n    public Promise = (): Promise<T> => {\n        return this.promise;\n    }\n\n    public Resolve = (result: T): Deferred<T> => {\n        this.sink.Resolve(result);\n        return this;\n    }\n\n    public Reject = (error: string): Deferred<T> => {\n        this.sink.Reject(error);\n        return this;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Sink<T> {\n\n    private state: PromiseState = PromiseState.None;\n    private promiseResult: PromiseResult<T> = null;\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\n\n    private successHandlers: Array<((result: T) => void)> = [];\n    private errorHandlers: Array<(e: string) => void> = [];\n\n    public constructor() {\n        this.promiseResultEvents = new PromiseResultEventSource();\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\n    }\n\n    public get State(): PromiseState {\n        return this.state;\n    }\n\n    public get Result(): PromiseResult<T> {\n        return this.promiseResult;\n    }\n\n    public Resolve = (result: T): void => {\n        if (this.state !== PromiseState.None) {\n            throw new Error(\"'Cannot resolve a completed promise'\");\n        }\n\n        this.state = PromiseState.Resolved;\n        this.promiseResultEvents.SetResult(result);\n\n        for (let i = 0; i < this.successHandlers.length; i++) {\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\n        }\n\n        this.DetachHandlers();\n    }\n\n    public Reject = (error: string): void => {\n        if (this.state !== PromiseState.None) {\n            throw new Error(\"'Cannot reject a completed promise'\");\n        }\n\n        this.state = PromiseState.Rejected;\n        this.promiseResultEvents.SetError(error);\n\n        for (const errorHandler of this.errorHandlers) {\n            this.ExecuteErrorCallback(error, errorHandler);\n        }\n\n        this.DetachHandlers();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): void => {\n\n        if (successCallback == null) {\n            successCallback = (r: T) => { return; };\n        }\n\n        if (this.state === PromiseState.None) {\n            this.successHandlers.push(successCallback);\n            this.errorHandlers.push(errorCallback);\n        } else {\n            if (this.state === PromiseState.Resolved) {\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\n            } else if (this.state === PromiseState.Rejected) {\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\n            }\n\n            this.DetachHandlers();\n        }\n    }\n\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\n        try {\n            successCallback(result);\n        } catch (e) {\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n        }\n    }\n\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\n        if (errorCallback) {\n            try {\n                errorCallback(error);\n            } catch (e) {\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n            }\n        } else {\n            throw new Error(`'Unhandled error: ${error}'`);\n        }\n    }\n\n    private DetachHandlers = (): void => {\n        this.errorHandlers = [];\n        this.successHandlers = [];\n    }\n}\n","import { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    Get(itemIndex: number): TItem;\n    First(): TItem;\n    Last(): TItem;\n\n    Add(item: TItem): void;\n    InsertAt(index: number, item: TItem): void;\n\n    RemoveFirst(): TItem;\n    RemoveLast(): TItem;\n    RemoveAt(index: number): TItem;\n    Remove(index: number, count: number): TItem[];\n    Clear(): void;\n\n    Length(): number;\n\n    OnAdded(addedCallback: () => void): IDetachable;\n    OnRemoved(removedCallback: () => void): IDetachable;\n    OnDisposed(disposedCallback: () => void): IDetachable;\n\n    Join(seperator?: string): string;\n\n    ToArray(): TItem[];\n\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\n    All(callback: (item: TItem) => boolean): boolean;\n    ForEach(callback: (item: TItem, index: number) => void): void;\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    Clone(): List<TItem>;\n    Concat(list: List<TItem>): List<TItem>;\n    ConcatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private list: TItem[];\n    private subscriptionIdCounter: number = 0;\n    private addSubscriptions: IStringDictionary<() => void> = {};\n    private removeSubscriptions: IStringDictionary<() => void> = {};\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\n    private disposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.list = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.list.push(item);\n            }\n        }\n    }\n\n    public Get = (itemIndex: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.list[itemIndex];\n    }\n\n    public First = (): TItem => {\n        return this.Get(0);\n    }\n\n    public Last = (): TItem => {\n        return this.Get(this.Length() - 1);\n    }\n\n    public Add = (item: TItem): void => {\n        this.ThrowIfDisposed();\n        this.InsertAt(this.list.length, item);\n    }\n\n    public InsertAt = (index: number, item: TItem): void => {\n        this.ThrowIfDisposed();\n        if (index === 0) {\n            this.list.unshift(item);\n        } else if (index === this.list.length) {\n            this.list.push(item);\n        } else {\n            this.list.splice(index, 0, item);\n        }\n        this.TriggerSubscriptions(this.addSubscriptions);\n    }\n\n    public RemoveFirst = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(0);\n    }\n\n    public RemoveLast = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(this.Length() - 1);\n    }\n\n    public RemoveAt = (index: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.Remove(index, 1)[0];\n    }\n\n    public Remove = (index: number, count: number): TItem[] => {\n        this.ThrowIfDisposed();\n        const removedElements = this.list.splice(index, count);\n        this.TriggerSubscriptions(this.removeSubscriptions);\n        return removedElements;\n    }\n\n    public Clear = (): void => {\n        this.ThrowIfDisposed();\n        this.Remove(0, this.Length());\n    }\n\n    public Length = (): number => {\n        this.ThrowIfDisposed();\n        return this.list.length;\n    }\n\n    public OnAdded = (addedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.addSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            Detach: () => {\n                delete this.addSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.removeSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            Detach: () => {\n                delete this.removeSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            Detach: () => {\n                delete this.disposedSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public Join = (seperator?: string): string => {\n        this.ThrowIfDisposed();\n        return this.list.join(seperator);\n    }\n\n    public ToArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.list.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        if (callback) {\n            return this.Where(callback).Length() > 0;\n        } else {\n            return this.Length() > 0;\n        }\n    }\n\n    public All = (callback: (item: TItem) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        return this.Where(callback).Length() === this.Length();\n    }\n\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\n        this.ThrowIfDisposed();\n        for (let i = 0; i < this.Length(); i++) {\n            callback(this.list[i], i);\n        }\n    }\n\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.ThrowIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.list.length; i++) {\n            selectList.push(callback(this.list[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.ThrowIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.list.length; i++) {\n            if (callback(this.list[i], i)) {\n                filteredList.Add(this.list[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        const clonedArray = this.ToArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public Clone = (): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.ToArray());\n    }\n\n    public Concat = (list: List<TItem>): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(list.ToArray()));\n    }\n\n    public ConcatArray = (array: TItem[]): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(array));\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.list == null;\n    }\n\n    public Dispose = (reason?: string): void => {\n        if (!this.IsDisposed()) {\n            this.disposeReason = reason;\n            this.list = null;\n            this.addSubscriptions = null;\n            this.removeSubscriptions = null;\n            this.TriggerSubscriptions(this.disposedSubscriptions);\n        }\n    }\n\n    private ThrowIfDisposed = (): void => {\n        if (this.IsDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\n        }\n    }\n\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n","import { InvalidOperationError, ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IDisposable } from \"./IDisposable\";\nimport { List } from \"./List\";\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\n\nexport interface IQueue<TItem> extends IDisposable {\n    Enqueue(item: TItem): void;\n    EnqueueFromPromise(promise: Promise<TItem>): void;\n    Dequeue(): Promise<TItem>;\n    Peek(): Promise<TItem>;\n    Length(): number;\n}\n\nenum SubscriberType {\n    Dequeue,\n    Peek,\n}\n\nexport class Queue<TItem> implements IQueue<TItem> {\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\n    private list: List<TItem>;\n    private detachables: IDetachable[];\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\n    private isDrainInProgress: boolean = false;\n    private isDisposing: boolean = false;\n    private disposeReason: string = null;\n\n    public constructor(list?: List<TItem>) {\n        this.list = list ? list : new List<TItem>();\n        this.detachables = [];\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\n        this.detachables.push(this.list.OnAdded(this.Drain));\n    }\n\n    public Enqueue = (item: TItem): void => {\n        this.ThrowIfDispose();\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\n    }\n\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\n        this.ThrowIfDispose();\n        this.promiseStore.Add(promise);\n        promise.Finally(() => {\n            while (this.promiseStore.Length() > 0) {\n                if (!this.promiseStore.First().Result().IsCompleted) {\n                    break;\n                } else {\n                    const p = this.promiseStore.RemoveFirst();\n                    if (!p.Result().IsError) {\n                        this.list.Add(p.Result().Result);\n                    } else {\n                        // TODO: Log as warning.\n                    }\n                }\n            }\n        });\n    }\n\n    public Dequeue = (): Promise<TItem> => {\n        this.ThrowIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\n        this.Drain();\n        return deferredSubscriber.Promise();\n    }\n\n    public Peek = (): Promise<TItem> => {\n        this.ThrowIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\n        this.Drain();\n        return deferredSubscriber.Promise();\n    }\n\n    public Length = (): number => {\n        this.ThrowIfDispose();\n        return this.list.Length();\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.subscribers == null;\n    }\n\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\n        if (!this.IsDisposed() && !this.isDisposing) {\n            this.disposeReason = reason;\n            this.isDisposing = true;\n            while (this.subscribers.Length() > 0) {\n                const subscriber = this.subscribers.RemoveFirst();\n                subscriber.deferral.Reject(\"Disposed\");\n            }\n\n            for (const detachable of this.detachables) {\n                detachable.Detach();\n            }\n\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\n                return PromiseHelper\n                    .WhenAll(this.promiseStore.ToArray())\n                    .ContinueWith(() => {\n                        this.subscribers = null;\n                        this.list.ForEach((item: TItem, index: number): void => {\n                            pendingItemProcessor(item);\n                        });\n                        this.list = null;\n                        return true;\n                    });\n            } else {\n                this.subscribers = null;\n                this.list = null;\n            }\n        }\n\n        return PromiseHelper.FromResult(true);\n    }\n\n    public Dispose = (reason?: string): void => {\n        this.DrainAndDispose(null, reason);\n    }\n\n    private Drain = (): void => {\n        if (!this.isDrainInProgress && !this.isDisposing) {\n            this.isDrainInProgress = true;\n\n            while (this.list.Length() > 0 && this.subscribers.Length() > 0 && !this.isDisposing) {\n                const subscriber = this.subscribers.RemoveFirst();\n                if (subscriber.type === SubscriberType.Peek) {\n                    subscriber.deferral.Resolve(this.list.First());\n                } else {\n                    const dequeuedItem = this.list.RemoveFirst();\n                    subscriber.deferral.Resolve(dequeuedItem);\n                }\n            }\n\n            this.isDrainInProgress = false;\n        }\n    }\n\n    private ThrowIfDispose = (): void => {\n        if (this.IsDisposed()) {\n            if (this.disposeReason) {\n                throw new InvalidOperationError(this.disposeReason);\n            }\n\n            throw new ObjectDisposedError(\"Queue\");\n        } else if (this.isDisposing) {\n            throw new InvalidOperationError(\"Queue disposing\");\n        }\n    }\n}\n","import { InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { Promise } from \"./Promise\";\nimport { Queue } from \"./Queue\";\nimport { IStreamChunk } from \"./Stream\";\n\nexport interface IStreamChunk<TBuffer> {\n    IsEnd: boolean;\n    Buffer: TBuffer;\n}\n\nexport class Stream<TBuffer> {\n    private id: string;\n    private readerIdCounter: number = 1;\n    private streambuffer: Array<IStreamChunk<TBuffer>>;\n    private isEnded: boolean = false;\n    private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\n\n    public constructor(streamId?: string) {\n        this.id = streamId ? streamId : CreateNoDashGuid();\n        this.streambuffer = [];\n        this.readerQueues = {};\n    }\n\n    public get IsClosed(): boolean {\n        return this.isEnded;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n\n    public Write = (buffer: TBuffer): void => {\n        this.ThrowIfClosed();\n        this.WriteStreamChunk({\n            Buffer: buffer,\n            IsEnd: false,\n        });\n    }\n\n    public GetReader = (): StreamReader<TBuffer> => {\n        const readerId = this.readerIdCounter;\n        this.readerIdCounter++;\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\n        const currentLength = this.streambuffer.length;\n        this.readerQueues[readerId] = readerQueue;\n        for (let i = 0; i < currentLength; i++) {\n            readerQueue.Enqueue(this.streambuffer[i]);\n        }\n        return new StreamReader(\n            this.id,\n            readerQueue,\n            () => {\n                delete this.readerQueues[readerId];\n            });\n    }\n\n    public Close = (): void => {\n        if (!this.isEnded) {\n            this.WriteStreamChunk({\n                Buffer: null,\n                IsEnd: true,\n            });\n            this.isEnded = true;\n        }\n    }\n\n    private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\n        this.ThrowIfClosed();\n        this.streambuffer.push(streamChunk);\n        for (const readerId in this.readerQueues) {\n            if (!this.readerQueues[readerId].IsDisposed()) {\n                try {\n                    this.readerQueues[readerId].Enqueue(streamChunk);\n                } catch (e) {\n                    // Do nothing\n                }\n            }\n        }\n    }\n\n    private ThrowIfClosed = (): void => {\n        if (this.isEnded) {\n            throw new InvalidOperationError(\"Stream closed\");\n        }\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class StreamReader<TBuffer> {\n    private readerQueue: Queue<IStreamChunk<TBuffer>>;\n    private onClose: () => void;\n    private isClosed: boolean = false;\n    private streamId: string;\n\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\n        this.readerQueue = readerQueue;\n        this.onClose = onClose;\n        this.streamId = streamId;\n    }\n\n    public get IsClosed(): boolean {\n        return this.isClosed;\n    }\n\n    public get StreamId(): string {\n        return this.streamId;\n    }\n\n    public Read = (): Promise<IStreamChunk<TBuffer>> => {\n        if (this.IsClosed) {\n            throw new InvalidOperationError(\"StreamReader closed\");\n        }\n\n        return this.readerQueue\n            .Dequeue()\n            .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\n                if (streamChunk.IsEnd) {\n                    this.readerQueue.Dispose(\"End of stream reached\");\n                }\n\n                return streamChunk;\n            });\n    }\n\n    public Close = (): void => {\n        if (!this.isClosed) {\n            this.isClosed = true;\n            this.readerQueue.Dispose(\"StreamReader closed\");\n            this.onClose();\n        }\n    }\n}\n","import { ConnectionEvent } from \"./ConnectionEvents\";\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\nimport { EventSource } from \"./EventSource\";\nimport { IDisposable } from \"./IDisposable\";\nimport { Promise } from \"./Promise\";\n\nexport enum ConnectionState {\n    None,\n    Connected,\n    Connecting,\n    Disconnected,\n}\n\nexport interface IConnection extends IDisposable {\n    Id: string;\n    State(): ConnectionState;\n    Open(): Promise<ConnectionOpenResponse>;\n    Send(message: ConnectionMessage): Promise<boolean>;\n    Read(): Promise<ConnectionMessage>;\n    Events: EventSource<ConnectionEvent>;\n}\n","import { ArgumentNullError } from \"./Error\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\n\nexport class InMemoryStorage implements IKeyValueStorage {\n\n    private store: IStringDictionary<string> = {};\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return this.store[key];\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] === undefined) {\n            this.store[key] = valueToAdd;\n        }\n\n        return this.store[key];\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        this.store[key] = value;\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] !== undefined) {\n            delete this.store[key];\n        }\n    }\n}\n","import { MessageType } from \"./ConnectionMessage\";\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\n\nexport class RawWebsocketMessage {\n\n    private messageType: MessageType;\n    private payload: any = null;\n    private id: string;\n\n    public constructor(messageType: MessageType, payload: any, id?: string) {\n        if (!payload) {\n            throw new ArgumentNullError(\"payload\");\n        }\n\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        this.messageType = messageType;\n        this.payload = payload;\n        this.id = id ? id : CreateNoDashGuid();\n    }\n\n    public get MessageType(): MessageType {\n        return this.messageType;\n    }\n\n    public get Payload(): any {\n        return this.payload;\n    }\n\n    public get TextContent(): string {\n        if (this.messageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.payload as string;\n    }\n\n    public get BinaryContent(): ArrayBuffer {\n        if (this.messageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.payload;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n}\n","\nexport class RiffPcmEncoder {\n\n    private actualSampleRate: number;\n    private desiredSampleRate: number;\n    private channelCount: number = 1;\n\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\n        this.actualSampleRate = actualSampleRate;\n        this.desiredSampleRate = desiredSampleRate;\n    }\n\n    public Encode = (\n        isFirstAudioFrame: boolean,\n        actualAudioFrame: Float32Array): ArrayBuffer => {\n\n        const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\n        const audioLength = audioFrame.length * 2;\n\n        if (!isFirstAudioFrame) {\n            const buffer = new ArrayBuffer(audioLength);\n            const view = new DataView(buffer);\n            this.FloatTo16BitPCM(view, 0, audioFrame);\n\n            return buffer;\n        }\n\n        const buffer = new ArrayBuffer(44 + audioLength);\n\n        const bitsPerSample = 16;\n        const bytesPerSample = bitsPerSample / 8;\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\n        const fileLength = 0;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n        const view = new DataView(buffer);\n\n        /* RIFF identifier */\n        this.SetString(view, 0, \"RIFF\");\n        /* file length */\n        view.setUint32(4, fileLength, true);\n        /* RIFF type & Format */\n        this.SetString(view, 8, \"WAVEfmt \");\n        /* format chunk length */\n        view.setUint32(16, 16, true);\n        /* sample format (raw) */\n        view.setUint16(20, 1, true);\n        /* channel count */\n        view.setUint16(22, this.channelCount, true);\n        /* sample rate */\n        view.setUint32(24, this.desiredSampleRate, true);\n        /* byte rate (sample rate * block align) */\n        view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\n        /* block align (channel count * bytes per sample) */\n        view.setUint16(32, this.channelCount * bytesPerSample, true);\n        /* bits per sample */\n        view.setUint16(34, bitsPerSample, true);\n        /* data chunk identifier */\n        this.SetString(view, 36, \"data\");\n        /* data chunk length */\n        view.setUint32(40, fileLength, true);\n\n        this.FloatTo16BitPCM(view, 44, audioFrame);\n\n        return buffer;\n    }\n\n    private SetString = (view: DataView, offset: number, str: string): void => {\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n\n    private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\n        for (let i = 0; i < input.length; i++ , offset += 2) {\n            const s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n\n    private DownSampleAudioFrame = (\n        audioFrame: Float32Array,\n        actualSampleRate: number,\n        desiredSamplerate: number): Float32Array => {\n\n        if (desiredSamplerate === actualSampleRate || desiredSamplerate > actualSampleRate) {\n            return audioFrame;\n        }\n\n        const sampleRateRatio = actualSampleRate / desiredSamplerate;\n        const newLength = Math.round(audioFrame.length / sampleRateRatio);\n        const downSampledAudioFrame = new Float32Array(newLength);\n        let offsetResult = 0;\n        let offsetBuffer = 0;\n        while (offsetResult < downSampledAudioFrame.length) {\n            const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            let accum = 0;\n            let count = 0;\n            for (let i = offsetBuffer; i < nextOffsetBuffer && i < audioFrame.length; i++) {\n                accum += audioFrame[i];\n                count++;\n            }\n            downSampledAudioFrame[offsetResult] = accum / count;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n\n        return downSampledAudioFrame;\n    }\n}\n","import { ArgumentNullError } from \"./Error\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\n\nexport class Storage {\n    private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\n    private static localStorage: IKeyValueStorage = new InMemoryStorage();\n\n    public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\n        if (!sessionStorage) {\n            throw new ArgumentNullError(\"sessionStorage\");\n        }\n\n        Storage.sessionStorage = sessionStorage;\n    }\n\n    public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\n        if (!localStorage) {\n            throw new ArgumentNullError(\"localStorage\");\n        }\n\n        Storage.localStorage = localStorage;\n    }\n\n    public static get Session(): IKeyValueStorage {\n        return Storage.sessionStorage;\n    }\n\n    public static get Local(): IKeyValueStorage {\n        return Storage.localStorage;\n    }\n}\n","\nexport * from \"./AudioSourceEvents\";\nexport * from \"./ConnectionEvents\";\nexport * from \"./ConnectionMessage\";\nexport * from \"./ConnectionOpenResponse\";\nexport * from \"./Error\";\nexport * from \"./Events\";\nexport * from \"./EventSource\";\nexport * from \"./Guid\";\nexport * from \"./IAudioSource\";\nexport * from \"./IConnection\";\nexport * from \"./IDetachable\";\nexport * from \"./IDictionary\";\nexport * from \"./IDisposable\";\nexport * from \"./IEventSource\";\nexport * from \"./IKeyValueStorage\";\nexport * from \"./InMemoryStorage\";\nexport * from \"./ITimer\";\nexport * from \"./IWebsocketMessageFormatter\";\nexport * from \"./List\";\nexport * from \"./PlatformEvent\";\nexport * from \"./Promise\";\nexport * from \"./Queue\";\nexport * from \"./RawWebsocketMessage\";\nexport * from \"./RiffPcmEncoder\";\nexport * from \"./Storage\";\nexport * from \"./Stream\";\n","import { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private logLevelFilter: EventType;\n\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\n        this.logLevelFilter = logLevelFilter;\n    }\n\n    public OnEvent = (event: PlatformEvent): void => {\n        if (event.EventType >= this.logLevelFilter) {\n            const log = this.ToString(event);\n\n            switch (event.EventType) {\n                case EventType.Debug:\n                    // tslint:disable-next-line:no-console\n                    console.debug(log);\n                    break;\n                case EventType.Info:\n                    // tslint:disable-next-line:no-console\n                    console.info(log);\n                    break;\n                case EventType.Warning:\n                    // tslint:disable-next-line:no-console\n                    console.warn(log);\n                    break;\n                case EventType.Error:\n                    // tslint:disable-next-line:no-console\n                    console.error(log);\n                    break;\n                default:\n                    // tslint:disable-next-line:no-console\n                    console.log(log);\n                    break;\n            }\n        }\n    }\n\n    private ToString = (event: any): string => {\n        const logFragments = [\n            `${event.EventTime}`,\n            `${event.Name}`,\n        ];\n\n        for (const prop in event) {\n            if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n                const value = event[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class LocalStorage implements IKeyValueStorage {\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = localStorage.getItem(key);\n        if (value === null || value === undefined) {\n            localStorage.setItem(key, valueToAdd);\n        }\n\n        return localStorage.getItem(key);\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.setItem(key, value);\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        localStorage.removeItem(key);\n    }\n}\n","import {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    CreateNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Stream,\n    StreamReader,\n} from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// Extending the default definition with browser specific definitions for backward compatibility\ninterface INavigatorUserMedia extends NavigatorUserMedia {\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n}\n\nexport class MicAudioSource implements IAudioSource {\n\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private id: string;\n\n    private events: EventSource<PlatformEvent>;\n\n    private initializeDeferral: Deferred<boolean>;\n\n    private recorder: IRecorder;\n\n    private mediaStream: MediaStream;\n\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\n        this.events = new EventSource();\n        this.recorder = recorder;\n    }\n\n    public TurnOn = (): Promise<boolean> => {\n        if (this.initializeDeferral) {\n            return this.initializeDeferral.Promise();\n        }\n\n        this.initializeDeferral = new Deferred<boolean>();\n\n        const nav = window.navigator as INavigatorUserMedia;\n        window.navigator.getUserMedia = (\n            window.navigator.getUserMedia ||\n            (window.navigator as INavigatorUserMedia).webkitGetUserMedia ||\n            (window.navigator as INavigatorUserMedia).mozGetUserMedia ||\n            (window.navigator as INavigatorUserMedia).msGetUserMedia\n        );\n\n        if (!window.navigator.getUserMedia) {\n            const errorMsg = \"Browser doesnot support getUserMedia.\";\n            this.initializeDeferral.Reject(errorMsg);\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n        } else {\n            this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\n            window.navigator.getUserMedia(\n                { audio: true },\n                (mediaStream: MediaStream) => {\n                    this.mediaStream = mediaStream;\n                    this.OnEvent(new AudioSourceReadyEvent(this.id));\n                    this.initializeDeferral.Resolve(true);\n\n                }, (error: MediaStreamError) => {\n                    const errorMsg = `Error occured processing the user media stream. ${error}`;\n                    this.initializeDeferral.Reject(errorMsg);\n                    this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\n                });\n        }\n\n        return this.initializeDeferral.Promise();\n    }\n\n    public Id = (): string => {\n        return this.id;\n    }\n\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\n\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\n            (streamReader: StreamReader<ArrayBuffer>) => {\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\n                return {\n                    Detach: () => {\n                        streamReader.Close();\n                        delete this.streams[audioNodeId];\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n                        this.TurnOff();\n                    },\n                    Id: () => {\n                        return audioNodeId;\n                    },\n                    Read: () => {\n                        return streamReader.Read();\n                    },\n                };\n            });\n    }\n\n    public Detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.streams[audioNodeId]) {\n            this.streams[audioNodeId].Close();\n            delete this.streams[audioNodeId];\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\n        }\n    }\n\n    public TurnOff = (): Promise<boolean> => {\n        for (const streamId in this.streams) {\n            if (streamId) {\n                const stream = this.streams[streamId];\n                if (stream) {\n                    stream.Close();\n                }\n            }\n        }\n\n        this.recorder.ReleaseMediaResources();\n\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\n        this.initializeDeferral = null;\n        return PromiseHelper.FromResult(true);\n    }\n\n    public get Events(): EventSource<AudioSourceEvent> {\n        return this.events;\n    }\n\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\n        return this.TurnOn()\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\n                this.streams[audioNodeId] = stream;\n\n                try {\n                    this.recorder.Record(this.mediaStream, stream);\n                } catch (error) {\n                    const errorMsg = `Error occured processing the user media stream. ${error}`;\n                    this.initializeDeferral.Reject(errorMsg);\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\n                }\n\n                return stream.GetReader();\n            });\n    }\n\n    private OnEvent = (event: AudioSourceEvent): void => {\n        this.events.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n}\n","import { Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\n// getting around the build error for MediaRecorder as Typescript does nothave a definition for this one.\ndeclare var MediaRecorder: any;\n\nexport class OpusRecorder implements IRecorder {\n    private mediaResources: IMediaResources;\n    private mediaRecorderOptions: any;\n\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\n        this.mediaRecorderOptions = options;\n    }\n\n    public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\n            if (outputStream) {\n                const reader = new FileReader();\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\n                reader.onloadend = (event: ProgressEvent) => {\n                    outputStream.Write(reader.result);\n                };\n            }\n        };\n\n        this.mediaResources = {\n            recorder: mediaRecorder,\n            stream: mediaStream,\n        };\n        mediaRecorder.start(timeslice);\n    }\n\n    public ReleaseMediaResources = (): void => {\n        if (this.mediaResources.recorder.state !== \"inactive\") {\n            this.mediaResources.recorder.stop();\n        }\n        this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\n    }\n}\n\ninterface IMediaResources {\n    stream: MediaStream;\n    recorder: any;\n}\n\n/* Declaring this inline to avoid compiler warnings\ndeclare class MediaRecorder {\n    constructor(mediaStream: MediaStream, options: any);\n\n    public state: string;\n\n    public ondataavailable(dataAvailableEvent: any): void;\n    public stop(): void;\n}*/\n","import { RiffPcmEncoder, Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\nexport class PcmRecorder implements IRecorder {\n    private mediaResources: IMediaResources;\n    public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n        const audioContext = new AudioContext();\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\n        const mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\n\n        const desiredSampleRate = 16000;\n        // let compressionRatio = mediaStreamSource.context.sampleRate / desiredSampleRate;\n        let bufferSize = 2048;\n        let isFirstFrameWritten: boolean = false;\n        if (desiredSampleRate * 4 <= mediaStreamSource.context.sampleRate) {\n            bufferSize = 8192;\n        } else if (desiredSampleRate * 2 <= mediaStreamSource.context.sampleRate) {\n            bufferSize = 4096;\n        }\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n        const scriptNode = mediaStreamSource.context.createScriptProcessor(bufferSize, 1, 1);\n        const waveStreamEncoder = new RiffPcmEncoder(mediaStreamSource.context.sampleRate, desiredSampleRate);\n\n        scriptNode.onaudioprocess = (audioProcessingEvent: AudioProcessingEvent) => {\n            const monoAudioChunk = audioProcessingEvent.inputBuffer.getChannelData(0);\n\n            let encodedAudioFrameWithRiffHeader: ArrayBuffer;\n            let encodedAudioFrame: ArrayBuffer;\n            if (outputStream) {\n                if (isFirstFrameWritten) {\n                    if (!encodedAudioFrame) {\n                        encodedAudioFrame = waveStreamEncoder.Encode(false, monoAudioChunk);\n                    }\n\n                    outputStream.Write(encodedAudioFrame);\n                } else {\n                    if (!encodedAudioFrameWithRiffHeader) {\n                        encodedAudioFrameWithRiffHeader =\n                            waveStreamEncoder.Encode(true, monoAudioChunk);\n                    }\n\n                    outputStream.Write(encodedAudioFrameWithRiffHeader);\n                    isFirstFrameWritten = true;\n                }\n            }\n        };\n\n        this.mediaResources = {\n            context: audioContext,\n            scriptProcessorNode: scriptNode,\n            source: mediaStreamSource,\n            stream: mediaStream,\n        };\n\n        mediaStreamSource.connect(scriptNode);\n        scriptNode.connect(mediaStreamSource.context.destination);\n    }\n\n    public ReleaseMediaResources = (): void => {\n        if (this.mediaResources) {\n            if (this.mediaResources.scriptProcessorNode) {\n                this.mediaResources.scriptProcessorNode.disconnect();\n                this.mediaResources.scriptProcessorNode = null;\n            }\n            if (this.mediaResources.source) {\n                this.mediaResources.source.disconnect();\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\n                this.mediaResources.source = null;\n            }\n            if (this.mediaResources.context && this.mediaResources.context.state !== \"closed\") {\n                this.mediaResources.context.close();\n            }\n        }\n    }\n}\n\ninterface IMediaResources {\n    context: AudioContext;\n    source: MediaStreamAudioSourceNode;\n    scriptProcessorNode: ScriptProcessorNode;\n    stream: MediaStream;\n}\n","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\n\nexport class SessionStorage implements IKeyValueStorage {\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        const value = sessionStorage.getItem(key);\n        if (value === null || value === undefined) {\n            sessionStorage.setItem(key, valueToAdd);\n        }\n\n        return sessionStorage.getItem(key);\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.setItem(key, value);\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        sessionStorage.removeItem(key);\n    }\n}\n","import { ITimer } from \"../common/Exports\";\n\nexport class Timer implements ITimer {\n    private delayInMillisec: number;\n    private timerId: number;\n    private successCallback: any;\n    constructor(delayInMillisec: number, successCallback: any) {\n        this.delayInMillisec = delayInMillisec;\n        this.successCallback = successCallback;\n    }\n    public start = (...params: any[]): void => {\n        if (this.timerId) {\n            this.stop();\n        }\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\n    }\n\n    public stop = (): void => {\n        clearTimeout(this.timerId);\n    }\n}\n","import {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    ConnectionOpenResponse,\n    ConnectionStartEvent,\n    ConnectionState,\n    Deferred,\n    Events,\n    EventSource,\n    IWebsocketMessageFormatter,\n    MessageType,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Queue,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\ninterface ISendItem {\n    Message: ConnectionMessage;\n    RawWebsocketMessage: RawWebsocketMessage;\n    SendStatusDeferral: Deferred<boolean>;\n}\n\nexport class WebsocketMessageAdapter {\n\n    private connectionState: ConnectionState;\n    private messageFormatter: IWebsocketMessageFormatter;\n    private websocketClient: WebSocket;\n\n    private sendMessageQueue: Queue<ISendItem>;\n    private receivingMessageQueue: Queue<ConnectionMessage>;\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\n    private disconnectDeferral: Deferred<boolean>;\n    private connectionEvents: EventSource<ConnectionEvent>;\n    private connectionId: string;\n    private uri: string;\n\n    public constructor(\n        uri: string,\n        connectionId: string,\n        messageFormatter: IWebsocketMessageFormatter) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.connectionEvents = new EventSource<ConnectionEvent>();\n        this.connectionId = connectionId;\n        this.messageFormatter = messageFormatter;\n        this.connectionState = ConnectionState.None;\n        this.uri = uri;\n    }\n\n    public get State(): ConnectionState {\n        return this.connectionState;\n    }\n\n    public Open = (): Promise<ConnectionOpenResponse> => {\n        if (this.connectionState === ConnectionState.Disconnected) {\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\n        }\n\n        if (this.connectionEstablishDeferral) {\n            return this.connectionEstablishDeferral.Promise();\n        }\n\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\n        this.connectionState = ConnectionState.Connecting;\n\n        this.websocketClient = new WebSocket(this.uri);\n        this.receivingMessageQueue = new Queue<ConnectionMessage>();\n        this.disconnectDeferral = new Deferred<boolean>();\n        this.sendMessageQueue = new Queue<ISendItem>();\n        this.ProcessSendQueue();\n\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\n\n        this.websocketClient.onopen = (e: Event) => {\n            this.connectionState = ConnectionState.Connected;\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\n        };\n\n        this.websocketClient.onerror = (e: Event) => {\n            // TODO: Understand what this is error is. Will we still get onClose ?\n            if (this.connectionState !== ConnectionState.Connecting) {\n                // TODO: Is this required ?\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\n            }\n        };\n\n        this.websocketClient.onclose = (e: CloseEvent) => {\n            if (this.connectionState === ConnectionState.Connecting) {\n                this.connectionState = ConnectionState.Disconnected;\n                this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\n            } else {\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\n            }\n\n            this.OnClose(e.code, e.reason);\n        };\n\n        this.websocketClient.onmessage = (e: MessageEvent) => {\n            const networkReceivedTime = new Date().toISOString();\n            if (this.connectionState === ConnectionState.Connected) {\n                const deferred = new Deferred<ConnectionMessage>();\n                // let id = ++this.idCounter;\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\n                if (e.data instanceof Blob) {\n                    const fileReader = new FileReader();\n                    fileReader.onload = (le: Event) => {\n                        const rawMessage = new RawWebsocketMessage(MessageType.Binary, fileReader.result);\n                        this.messageFormatter\n                            .ToConnectionMessage(rawMessage)\n                            .On((connectionMessage: ConnectionMessage) => {\n                                this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                                deferred.Resolve(connectionMessage);\n                            }, (error: string) => {\n                                // TODO: Events for these ?\n                                deferred.Reject(`Invalid binary message format. Error: ${error}`);\n                            });\n                    };\n                    fileReader.onerror = (ev: Event) => {\n                        // TODO: Events for these ?\n                        deferred.Reject(\"Binary message parse error\");\n                    };\n\n                    fileReader.readAsArrayBuffer(e.data);\n                } else {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n                    this.messageFormatter\n                        .ToConnectionMessage(rawMessage)\n                        .On((connectionMessage: ConnectionMessage) => {\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                            deferred.Resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\n                        });\n                }\n            }\n        };\n\n        return this.connectionEstablishDeferral.Promise();\n    }\n\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\n        }\n\n        const messageSendStatusDeferral = new Deferred<boolean>();\n        const messageSendDeferral = new Deferred<ISendItem>();\n\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\n\n        this.messageFormatter\n            .FromConnectionMessage(message)\n            .On((rawMessage: RawWebsocketMessage) => {\n                messageSendDeferral.Resolve({\n                    Message: message,\n                    RawWebsocketMessage: rawMessage,\n                    SendStatusDeferral: messageSendStatusDeferral,\n                });\n            }, (error: string) => {\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\n            });\n\n        return messageSendStatusDeferral.Promise();\n    }\n\n    public Read = (): Promise<ConnectionMessage> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\n        }\n\n        return this.receivingMessageQueue.Dequeue();\n    }\n\n    public Close = (reason?: string): Promise<boolean> => {\n        if (this.websocketClient) {\n            if (this.connectionState !== ConnectionState.Connected) {\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n            }\n        } else {\n            const deferral = new Deferred<boolean>();\n            deferral.Resolve(true);\n            return deferral.Promise();\n        }\n\n        return this.disconnectDeferral.Promise();\n    }\n\n    public get Events(): EventSource<PlatformEvent> {\n        return this.connectionEvents;\n    }\n\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\n        try {\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\n            return PromiseHelper.FromResult(true);\n        } catch (e) {\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\n        }\n    }\n\n    private OnClose = (code: number, reason: string): void => {\n        const closeReason = `Connection closed. ${code}: ${reason}`;\n        this.connectionState = ConnectionState.Disconnected;\n        this.disconnectDeferral.Resolve(true);\n        this.receivingMessageQueue.Dispose(reason);\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\n            // TODO: Events for these ?\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n        }, closeReason);\n\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\n        }, closeReason);\n    }\n\n    private ProcessSendQueue = (): void => {\n        this.sendMessageQueue\n            .Dequeue()\n            .On((sendItem: ISendItem) => {\n                this.SendRawMessage(sendItem)\n                    .On((result: boolean) => {\n                        sendItem.SendStatusDeferral.Resolve(result);\n                        this.ProcessSendQueue();\n                    }, (sendError: string) => {\n                        sendItem.SendStatusDeferral.Reject(sendError);\n                        this.ProcessSendQueue();\n                    });\n            }, (error: string) => {\n                // do nothing\n            });\n    }\n\n    private OnEvent = (event: ConnectionEvent): void => {\n        this.connectionEvents.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n}\n","import {\n    ArgumentNullError,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    CreateNoDashGuid,\n    EventSource,\n    IConnection,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    PlatformEvent,\n    Promise,\n} from \"../common/Exports\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\n\nexport class WebsocketConnection implements IConnection {\n\n    private uri: string;\n    private messageFormatter: IWebsocketMessageFormatter;\n    private connectionMessageAdapter: WebsocketMessageAdapter;\n    private id: string;\n    private isDisposed: boolean = false;\n\n    public constructor(\n        uri: string,\n        queryParameters: IStringDictionary<string>,\n        headers: IStringDictionary<string>,\n        messageFormatter: IWebsocketMessageFormatter,\n        connectionId?: string) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.messageFormatter = messageFormatter;\n\n        let queryParams = \"\";\n        let i = 0;\n\n        if (queryParameters) {\n            for (const paramName in queryParameters) {\n                if (paramName) {\n                    queryParams += i === 0 ? \"?\" : \"&\";\n                    const val = encodeURIComponent(queryParameters[paramName]);\n                    queryParams += `${paramName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        if (headers) {\n            for (const headerName in headers) {\n                if (headerName) {\n                    queryParams += i === 0 ? \"?\" : \"&\";\n                    const val = encodeURIComponent(headers[headerName]);\n                    queryParams += `${headerName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        this.uri = uri + queryParams;\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\n\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\n            this.uri,\n            this.Id,\n            this.messageFormatter);\n    }\n\n    public Dispose = (): void => {\n        this.isDisposed = true;\n\n        if (this.connectionMessageAdapter) {\n            this.connectionMessageAdapter.Close();\n        }\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.isDisposed;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n\n    public State = (): ConnectionState => {\n        return this.connectionMessageAdapter.State;\n    }\n\n    public Open = (): Promise<ConnectionOpenResponse> => {\n        return this.connectionMessageAdapter.Open();\n    }\n\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\n        return this.connectionMessageAdapter.Send(message);\n    }\n\n    public Read = (): Promise<ConnectionMessage> => {\n        return this.connectionMessageAdapter.Read();\n    }\n\n    public get Events(): EventSource<PlatformEvent> {\n        return this.connectionMessageAdapter.Events;\n    }\n}\n","\nexport * from \"./ConsoleLoggingListener\";\nexport * from \"./IRecorder\";\nexport * from \"./LocalStorage\";\nexport * from \"./MicAudioSource\";\nexport * from \"./OpusRecorder\";\nexport * from \"./PCMRecorder\";\nexport * from \"./SessionStorage\";\nexport * from \"./Timer\";\nexport * from \"./WebsocketConnection\";\nexport * from \"./WebsocketMessageAdapter\";\n","import { Promise } from \"../../common/Exports\";\n\nexport interface IAuthentication {\n    Fetch(authFetchEventId: string): Promise<AuthInfo>;\n    FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\n}\n\nexport class AuthInfo {\n    private headerName: string;\n    private token: string;\n\n    public constructor(headerName: string, token: string) {\n        this.headerName = headerName;\n        this.token = token;\n    }\n\n    public get HeaderName(): string {\n        return this.headerName;\n    }\n\n    public get Token(): string {\n        return this.token;\n    }\n}\n","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\n\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private authInfo: AuthInfo;\n\n    constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\n    }\n\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.FromResult(this.authInfo);\n    }\n\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return PromiseHelper.FromResult(this.authInfo);\n    }\n}\n","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.fetchCallback = fetchCallback;\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n","\nexport enum RecognitionMode {\n    Interactive,\n    Conversation,\n    Dictation,\n}\n\nexport enum SpeechResultFormat {\n    Simple,\n    Detailed,\n}\n\nexport class RecognizerConfig {\n    private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\n    private language: string;\n    private format: SpeechResultFormat;\n    private speechConfig: SpeechConfig;\n    private recognitionActivityTimeout: number;\n\n    constructor(\n        platformConfig: SpeechConfig,\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\n        language: string = \"en-us\",\n        format: SpeechResultFormat = SpeechResultFormat.Simple) {\n        this.speechConfig = platformConfig ? platformConfig : new SpeechConfig(new Context(null, null));\n        this.recognitionMode = recognitionMode;\n        this.language = language;\n        this.format = format;\n        this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\n    }\n\n    public get RecognitionMode(): RecognitionMode {\n        return this.recognitionMode;\n    }\n\n    public get Language(): string {\n        return this.language;\n    }\n\n    public get Format(): SpeechResultFormat{\n        return this.format;\n    }\n\n    public get SpeechConfig(): SpeechConfig {\n        return this.speechConfig;\n    }\n\n    public get RecognitionActivityTimeout(): number {\n        return this.recognitionActivityTimeout;\n    }\n\n    public get IsContinuousRecognition(): boolean {\n        return this.recognitionMode !== RecognitionMode.Interactive;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechConfig {\n    private context: Context;\n\n    constructor(context: Context) {\n        this.context = context;\n    }\n\n    public Serialize = (): string => {\n        return JSON.stringify(this, (key: any, value: any): any => {\n        if (value && typeof value === \"object\") {\n            const replacement: any = {};\n            for (const k in value) {\n                if (Object.hasOwnProperty.call(value, k)) {\n                    replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n                }\n            }\n            return replacement;\n        }\n        return value;\n        });\n    }\n\n    public get Context(): Context{\n        return this.context;\n    }\n\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Context {\n    private system: System;\n    private os: OS;\n    private device: Device;\n\n    constructor(os: OS, device: Device) {\n        this.system = new System();\n        this.os = os;\n        this.device = device;\n    }\n\n    public get System(): System {\n        return this.system;\n    }\n\n    public get OS(): OS {\n        return this.os;\n    }\n\n    public get Device(): Device {\n        return this.device;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class System {\n    private version: string;\n    constructor() {\n        // TODO: Tie this with the sdk Version somehow\n        this.version = \"1.0.00000\";\n    }\n    public get Version(): string {\n        // Controlled by sdk\n        return this.version;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class OS {\n\n    private platform: string;\n    private name: string;\n    private version: string;\n\n    constructor(platform: string, name: string, version: string) {\n        this.platform = platform;\n        this.name = name;\n        this.version = version;\n    }\n\n    public get Platform(): string {\n        return this.platform;\n    }\n\n    public get Name(): string {\n        return this.name;\n    }\n\n    public get Version(): string {\n        return this.version;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Device {\n\n    private manufacturer: string;\n    private model: string;\n    private version: string;\n\n    constructor(manufacturer: string, model: string, version: string) {\n        this.manufacturer = manufacturer;\n        this.model = model;\n        this.version = version;\n    }\n\n    public get Manufacturer(): string {\n        return this.manufacturer;\n    }\n\n    public get Model(): string {\n        return this.model;\n    }\n\n    public get Version(): string {\n        return this.version;\n    }\n}\n","\nexport enum RecognitionStatus {\n    Success,\n    NoMatch,\n    InitialSilenceTimeout,\n    BabbleTimeout,\n    Error,\n    EndOfDictation,\n}\n\nexport interface ISpeechStartDetectedResult {\n    Offset?: number;\n}\n\nexport interface ISpeechHypothesisResult {\n    Text: string;\n    Offset?: number;\n    Duration?: number;\n}\n\nexport interface ISpeechEndDetectedResult {\n    Offset?: number;\n}\n\nexport interface ISimpleSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    DisplayText: string;\n    Duration?: number;\n    Offset?: number;\n}\n\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display: string;\n}\n","import { EventType, PlatformEvent } from \"../../common/Exports\";\nimport {\n    IDetailedSpeechPhrase,\n    ISimpleSpeechPhrase,\n    ISpeechEndDetectedResult,\n    ISpeechHypothesisResult,\n    ISpeechStartDetectedResult,\n} from \"./SpeechResults\";\n\nexport class SpeechRecognitionEvent extends PlatformEvent {\n    private requestId: string;\n\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n\n        this.requestId = requestId;\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechRecognitionResultEvent<TResult> extends SpeechRecognitionEvent {\n    private result: TResult;\n\n    constructor(eventName: string, requestId: string, result: TResult) {\n        super(eventName, requestId);\n        this.result = result;\n    }\n\n    public get Result(): TResult {\n        return this.result;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"RecognitionTriggeredEvent\", requestId);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"ListeningStartedEvent\", requestId);\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\n    private authFetchEventid: string;\n    private connectionId: string;\n\n    constructor(requestId: string, authFetchEventid: string, connectionId: string) {\n        super(\"ConnectingToServiceEvent\", requestId);\n        this.authFetchEventid = authFetchEventid;\n        this.connectionId = connectionId;\n    }\n\n    public get AuthFetchEventid(): string {\n        return this.authFetchEventid;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private authFetchEventId: string;\n    private connectionId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, connectionId: string) {\n        super(\"RecognitionStartedEvent\", requestId);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n        this.authFetchEventId = authFetchEventId;\n        this.connectionId = connectionId;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get AuthFetchEventId(): string {\n        return this.authFetchEventId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechStartDetectedEvent extends SpeechRecognitionResultEvent<ISpeechStartDetectedResult> {\n    constructor(requestId: string, result: ISpeechStartDetectedResult) {\n        super(\"SpeechStartDetectedEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechHypothesisEvent extends SpeechRecognitionResultEvent<ISpeechHypothesisResult> {\n    constructor(requestId: string, result: ISpeechHypothesisResult) {\n        super(\"SpeechHypothesisEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechEndDetectedEvent extends SpeechRecognitionResultEvent<ISpeechEndDetectedResult> {\n    constructor(requestId: string, result: ISpeechEndDetectedResult) {\n        super(\"SpeechEndDetectedEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechSimplePhraseEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\n    constructor(requestId: string, result: ISimpleSpeechPhrase) {\n        super(\"SpeechSimplePhraseEvent\", requestId, result);\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechDetailedPhraseEvent extends SpeechRecognitionResultEvent<IDetailedSpeechPhrase> {\n    constructor(requestId: string, result: IDetailedSpeechPhrase) {\n        super(\"SpeechDetailedPhraseEvent\", requestId, result);\n    }\n}\n\nexport enum RecognitionCompletionStatus {\n    Success,\n    AudioSourceError,\n    AudioSourceTimeout,\n    AuthTokenFetchError,\n    AuthTokenFetchTimeout,\n    UnAuthorized,\n    ConnectTimeout,\n    ConnectError,\n    ClientRecognitionActivityTimeout,\n    UnknownError,\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private authFetchEventId: string;\n    private connectionId: string;\n    private serviceTag: string;\n    private status: RecognitionCompletionStatus;\n    private error: string;\n\n    constructor(\n        requestId: string,\n        audioSourceId: string,\n        audioNodeId: string,\n        authFetchEventId: string,\n        connectionId: string,\n        serviceTag: string,\n        status: RecognitionCompletionStatus,\n        error: string) {\n\n        super(\"RecognitionEndedEvent\", requestId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\n\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n        this.connectionId = connectionId;\n        this.authFetchEventId = authFetchEventId;\n\n        this.serviceTag = serviceTag;\n    }\n\n    public get AudioSourceId(): string {\n        return this.audioSourceId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get AuthFetchEventId(): string {\n        return this.authFetchEventId;\n    }\n\n    public get ConnectionId(): string {\n        return this.connectionId;\n    }\n\n    public get ServiceTag(): string {\n        return this.serviceTag;\n    }\n\n    public get Status(): RecognitionCompletionStatus {\n        return this.status;\n    }\n\n    public get Error(): string {\n        return this.error;\n    }\n}\n","import {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    RecognitionTriggeredEvent,\n} from \"./RecognitionEvents\";\n\ninterface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\n// tslint:disable-next-line:max-classes-per-file\ninterface IMetric {\n    End: string;\n    Error?: string;\n    Id?: string;\n    Name: string;\n    Start: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private isDisposed: boolean = false;\n\n    private requestId: string;\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    private listeningTriggerMetric: IMetric = null;\n    private micMetric: IMetric = null;\n    private connectionEstablishMetric: IMetric = null;\n\n    private micStartTime: string;\n\n    private connectionId: string;\n    private connectionStartTime: string;\n\n    private receivedMessages: IStringDictionary<string[]>;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.requestId = requestId;\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n\n        this.receivedMessages = {};\n    }\n\n    public OnEvent = (e: PlatformEvent): void => {\n        if (this.isDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\n            this.listeningTriggerMetric = {\n                End: e.EventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.EventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\n            this.connectionId = e.ConnectionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\n            this.connectionStartTime = e.EventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Error: this.GetConnectionError(e.StatusCode),\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\n                if (!this.receivedMessages[e.Message.Headers.path]) {\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\n                }\n\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\n            }\n        }\n    }\n\n    public GetTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.listeningTriggerMetric) {\n            metrics.push(this.listeningTriggerMetric);\n        }\n\n        if (this.micMetric) {\n            metrics.push(this.micMetric);\n        }\n\n        if (this.connectionEstablishMetric) {\n            metrics.push(this.connectionEstablishMetric);\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.receivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.receivedMessages = {};\n        this.listeningTriggerMetric = null;\n        this.micMetric = null;\n        this.connectionEstablishMetric = null;\n\n        return json;\n    }\n\n    public Dispose = (): void => {\n        this.isDisposed = true;\n    }\n\n    private GetConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n","import {\n    ArgumentNullError,\n    ConnectionMessage,\n    IStringDictionary,\n    MessageType,\n} from \"../../common/Exports\";\n\nconst PathHeaderName: string = \"path\";\nconst ContentTypeHeaderName: string = \"content-type\";\nconst RequestIdHeaderName: string = \"x-requestid\";\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\n\nexport class SpeechConnectionMessage extends ConnectionMessage {\n\n    private path: string;\n    private requestId: string;\n    private contentType: string;\n    private additionalHeaders: IStringDictionary<string>;\n\n    public constructor(\n        messageType: MessageType,\n        path: string,\n        requestId: string,\n        contentType: string,\n        body: any,\n        additionalHeaders?: IStringDictionary<string>,\n        id?: string) {\n\n        if (!path) {\n            throw new ArgumentNullError(\"path\");\n        }\n\n        if (!requestId) {\n            throw new ArgumentNullError(\"requestId\");\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[PathHeaderName] = path;\n        headers[RequestIdHeaderName] = requestId;\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\n        if (contentType) {\n            headers[ContentTypeHeaderName] = contentType;\n        }\n\n        if (additionalHeaders) {\n            for (const headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n\n            }\n        }\n\n        if (id) {\n            super(messageType, body, headers, id);\n        } else {\n            super(messageType, body, headers);\n        }\n\n        this.path = path;\n        this.requestId = requestId;\n        this.contentType = contentType;\n        this.additionalHeaders = additionalHeaders;\n    }\n\n    public get Path(): string {\n        return this.path;\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n\n    public get ContentType(): string {\n        return this.contentType;\n    }\n\n    public get AdditionalHeaders(): IStringDictionary<string> {\n        return this.additionalHeaders;\n    }\n\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\n        let path = null;\n        let requestId = null;\n        let contentType = null;\n        let requestTimestamp = null;\n        const additionalHeaders: IStringDictionary<string> = {};\n\n        if (message.Headers) {\n            for (const headerName in message.Headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\n                        path = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\n                        requestId = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\n                        requestTimestamp = message.Headers[headerName];\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\n                        contentType = message.Headers[headerName];\n                    } else {\n                        additionalHeaders[headerName] = message.Headers[headerName];\n                    }\n                }\n            }\n        }\n\n        return new SpeechConnectionMessage(\n            message.MessageType,\n            path,\n            requestId,\n            contentType,\n            message.Body,\n            additionalHeaders,\n            message.Id);\n    }\n}\n","import {\n    ArgumentNullError,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    CreateNoDashGuid,\n    Deferred,\n    Events,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    IDetachable,\n    IEventSource,\n    IStreamChunk,\n    MessageType,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    PromiseResult,\n} from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionCompletionStatus,\n    RecognitionEndedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechDetailedPhraseEvent,\n    SpeechEndDetectedEvent,\n    SpeechHypothesisEvent,\n    SpeechRecognitionEvent,\n    SpeechRecognitionResultEvent,\n    SpeechSimplePhraseEvent,\n    SpeechStartDetectedEvent,\n} from \"./RecognitionEvents\";\nimport { RecognitionMode, RecognizerConfig, SpeechResultFormat } from \"./RecognizerConfig\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\nimport {\n    IDetailedSpeechPhrase,\n    ISimpleSpeechPhrase,\n    ISpeechEndDetectedResult,\n    ISpeechHypothesisResult,\n    ISpeechStartDetectedResult,\n} from \"./SpeechResults\";\n\nexport class Recognizer {\n    private authentication: IAuthentication;\n    private connectionFactory: IConnectionFactory;\n    private audioSource: IAudioSource;\n    private recognizerConfig: RecognizerConfig;\n    private speechConfigConnectionId: string;\n    private connectionFetchPromise: Promise<IConnection>;\n    private connectionId: string;\n    private authFetchEventId: string;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!audioSource) {\n            throw new ArgumentNullError(\"audioSource\");\n        }\n\n        if (!recognizerConfig) {\n            throw new ArgumentNullError(\"recognizerConfig\");\n        }\n\n        this.authentication = authentication;\n        this.connectionFactory = connectionFactory;\n        this.audioSource = audioSource;\n        this.recognizerConfig = recognizerConfig;\n    }\n\n    public get AudioSource(): IAudioSource {\n        return this.audioSource;\n    }\n\n    public Recognize = (onEventCallback: (event: SpeechRecognitionEvent) => void, speechContextJson?: string): Promise<boolean> => {\n        const requestSession = new RequestSession(this.audioSource.Id(), onEventCallback);\n        requestSession.ListenForServiceTelemetry(this.audioSource.Events);\n\n        return this.audioSource\n            .Attach(requestSession.AudioNodeId)\n            .ContinueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\n                if (result.IsError) {\n                    requestSession.OnAudioSourceAttachCompleted(null, true, result.Error);\n                    throw new Error(result.Error);\n                } else {\n                    requestSession.OnAudioSourceAttachCompleted(result.Result, false);\n                }\n\n                const audioNode = result.Result;\n\n                this.FetchConnection(requestSession)\n                    .OnSuccessContinueWith((connection: IConnection) => {\n                        const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession);\n                        const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.SpeechConfig.Serialize())\n                            .OnSuccessContinueWithPromise((_: boolean) => {\n                                return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\n                                    .OnSuccessContinueWithPromise((_: boolean) => {\n                                        return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\n                                    });\n                            });\n\n                        const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\n\n                        completionPromise.On((r: boolean) => {\n                            requestSession.Dispose();\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                        }, (error: string) => {\n                            requestSession.Dispose(error);\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                        });\n\n                        return completionPromise;\n                    });\n\n                return requestSession.CompletionPromise;\n            });\n    }\n\n    private FetchConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\n        if (this.connectionFetchPromise) {\n            if (this.connectionFetchPromise.Result().IsError\n                || this.connectionFetchPromise.Result().Result.State() === ConnectionState.Disconnected) {\n                this.connectionId = null;\n                this.connectionFetchPromise = null;\n                return this.FetchConnection(requestSession);\n            } else {\n                requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\n                requestSession.OnConnectionEstablishCompleted(200);\n                requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\n                return this.connectionFetchPromise;\n            }\n        }\n\n        this.authFetchEventId = CreateNoDashGuid();\n        this.connectionId = CreateNoDashGuid();\n\n        requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\n\n        const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\n\n        this.connectionFetchPromise = authPromise\n            .ContinueWithPromise((result: PromiseResult<AuthInfo>) => {\n                if (result.IsError) {\n                    requestSession.OnAuthCompleted(true, result.Error);\n                    throw new Error(result.Error);\n                } else {\n                    requestSession.OnAuthCompleted(false);\n                }\n\n                const connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\n                requestSession.ListenForServiceTelemetry(connection.Events);\n\n                return connection.Open().OnSuccessContinueWithPromise((response: ConnectionOpenResponse) => {\n                    if (response.StatusCode === 200) {\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode);\n                        return PromiseHelper.FromResult(connection);\n                    } else if (response.StatusCode === 403 && !isUnAuthorized) {\n                        return this.FetchConnection(requestSession, true);\n                    } else {\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\n                        return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\n                    }\n                });\n            });\n\n        return this.connectionFetchPromise;\n    }\n\n    private ReceiveMessage = (connection: IConnection, requestSession: RequestSession): Promise<boolean> => {\n        return connection\n            .Read()\n            .OnSuccessContinueWithPromise((message: ConnectionMessage) => {\n                const connectionMessage = SpeechConnectionMessage.FromConnectionMessage(message);\n                if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\n                    switch (connectionMessage.Path.toLowerCase()) {\n                        case \"turn.start\":\n                            requestSession.OnServiceTurnStartResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.startDetected\":\n                            requestSession.OnServiceSpeechStartDetectedResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.hypothesis\":\n                            requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.enddetected\":\n                            requestSession.OnServiceSpeechEndDetectedResponse(JSON.parse(connectionMessage.TextBody));\n                            break;\n                        case \"speech.phrase\":\n                            if (this.recognizerConfig.IsContinuousRecognition) {\n                                // For continuous recognition telemetry has to be sent for every phrase as per spec.\n                                this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\n                            }\n                            if (this.recognizerConfig.Format === SpeechResultFormat.Simple) {\n                                requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\n                            } else {\n                                requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\n                            }\n                            break;\n                        case \"turn.end\":\n                            requestSession.OnServiceTurnEndResponse();\n                            return PromiseHelper.FromResult(true);\n                        default:\n                            break;\n                    }\n                }\n\n                return this.ReceiveMessage(connection, requestSession);\n            });\n    }\n\n    private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\n        if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\n            this.speechConfigConnectionId = this.connectionId;\n            return connection\n                .Send(new SpeechConnectionMessage(\n                    MessageType.Text,\n                    \"speech.config\",\n                    requestId,\n                    \"application/json\",\n                    speechConfigJson));\n        }\n\n        return PromiseHelper.FromResult(true);\n    }\n\n    private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\n        if (speechContextJson) {\n            return connection\n                .Send(new SpeechConnectionMessage(\n                    MessageType.Text,\n                    \"speech.context\",\n                    requestId,\n                    \"application/json\",\n                    speechContextJson));\n        }\n        return PromiseHelper.FromResult(true);\n    }\n\n    private SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\n        return connection\n            .Send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"telemetry\",\n                requestId,\n                \"application/json\",\n                telemetryData));\n    }\n\n    private SendAudio = (\n        requestId: string,\n        connection: IConnection,\n        audioStreamNode: IAudioStreamNode,\n        requestSession: RequestSession): Promise<boolean> => {\n        return audioStreamNode\n            .Read()\n            .OnSuccessContinueWithPromise((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\n                if (requestSession.IsSpeechEnded) {\n                    // If service already recognized audio end then dont send any more audio\n                    return PromiseHelper.FromResult(true);\n                } else if (audioStreamChunk.IsEnd) {\n                    return connection\n                        .Send(new SpeechConnectionMessage(\n                            MessageType.Binary,\n                            \"audio\",\n                            requestId,\n                            null,\n                            null));\n                } else {\n                    return connection\n                        .Send(new SpeechConnectionMessage(\n                            MessageType.Binary,\n                            \"audio\",\n                            requestId,\n                            null,\n                            audioStreamChunk.Buffer))\n                        .OnSuccessContinueWithPromise((_: boolean) => {\n                            return this.SendAudio(requestId, connection, audioStreamNode, requestSession);\n                        });\n                }\n            });\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass RequestSession {\n    private isDisposed: boolean = false;\n    private serviceTelemetryListener: ServiceTelemetryListener;\n    private detachables: IDetachable[] = new Array<IDetachable>();\n    private requestId: string;\n    private audioSourceId: string;\n    private audioNodeId: string;\n    private audioNode: IAudioStreamNode;\n    private authFetchEventId: string;\n    private connectionId: string;\n    private serviceTag: string;\n    private isAudioNodeDetached: boolean = false;\n    private isCompleted: boolean = false;\n    private onEventCallback: (event: SpeechRecognitionEvent) => void;\n\n    private requestCompletionDeferral: Deferred<boolean>;\n\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\n        this.audioSourceId = audioSourceId;\n        this.onEventCallback = onEventCallback;\n        this.requestId = CreateNoDashGuid();\n        this.audioNodeId = CreateNoDashGuid();\n        this.requestCompletionDeferral = new Deferred<boolean>();\n\n        this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\n\n        this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.audioSourceId, this.audioNodeId));\n    }\n\n    public get RequestId(): string {\n        return this.requestId;\n    }\n\n    public get AudioNodeId(): string {\n        return this.audioNodeId;\n    }\n\n    public get CompletionPromise(): Promise<boolean> {\n        return this.requestCompletionDeferral.Promise();\n    }\n\n    public get IsSpeechEnded(): boolean {\n        return this.isAudioNodeDetached;\n    }\n\n    public get IsCompleted(): boolean {\n        return this.isCompleted;\n    }\n\n    public ListenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\n    }\n\n    public OnAudioSourceAttachCompleted = (audioNode: IAudioStreamNode, isError: boolean, error?: string): void => {\n        this.audioNode = audioNode;\n        if (isError) {\n            this.OnComplete(RecognitionCompletionStatus.AudioSourceError, error);\n        } else {\n            this.OnEvent(new ListeningStartedEvent(this.requestId, this.audioSourceId, this.audioNodeId));\n        }\n    }\n\n    public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.authFetchEventId = authFetchEventId;\n        this.connectionId = connectionId;\n        this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.connectionId));\n    }\n\n    public OnAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.OnComplete(RecognitionCompletionStatus.AuthTokenFetchError, error);\n        }\n    }\n\n    public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId));\n            return;\n        } else if (statusCode === 403) {\n            this.OnComplete(RecognitionCompletionStatus.UnAuthorized, reason);\n        } else {\n            this.OnComplete(RecognitionCompletionStatus.ConnectError, reason);\n        }\n    }\n\n    public OnServiceTurnStartResponse = (response: ITurnStartResponse): void => {\n        if (response && response.context && response.context.serviceTag) {\n            this.serviceTag = response.context.serviceTag;\n        }\n    }\n\n    public OnServiceSpeechStartDetectedResponse = (result: ISpeechStartDetectedResult): void => {\n        this.OnEvent(new SpeechStartDetectedEvent(this.RequestId, result));\n    }\n\n    public OnServiceSpeechHypothesisResponse = (result: ISpeechHypothesisResult): void => {\n        this.OnEvent(new SpeechHypothesisEvent(this.RequestId, result));\n    }\n\n    public OnServiceSpeechEndDetectedResponse = (result: ISpeechEndDetectedResult): void => {\n        this.DetachAudioNode();\n        this.OnEvent(new SpeechEndDetectedEvent(this.RequestId, result));\n    }\n\n    public OnServiceSimpleSpeechPhraseResponse = (result: ISimpleSpeechPhrase): void => {\n        this.OnEvent(new SpeechSimplePhraseEvent(this.RequestId, result));\n    }\n\n    public OnServiceDetailedSpeechPhraseResponse = (result: IDetailedSpeechPhrase): void => {\n        this.OnEvent(new SpeechDetailedPhraseEvent(this.RequestId, result));\n    }\n\n    public OnServiceTurnEndResponse = (): void => {\n        this.OnComplete(RecognitionCompletionStatus.Success);\n    }\n\n    public OnConnectionError = (error: string): void => {\n        this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\n    }\n\n    public Dispose = (error?: string): void => {\n        if (!this.isDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\n            this.isDisposed = true;\n            for (const detachable of this.detachables) {\n                detachable.Detach();\n            }\n\n            this.serviceTelemetryListener.Dispose();\n        }\n    }\n\n    public GetTelemetry = (): string => {\n        return this.serviceTelemetryListener.GetTelemetry();\n    }\n\n    private OnComplete = (status: RecognitionCompletionStatus, error?: string): void => {\n        if (!this.isCompleted) {\n            this.isCompleted = true;\n            this.DetachAudioNode();\n            this.OnEvent(new RecognitionEndedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId, this.serviceTag, status, error ? error : \"\"));\n        }\n    }\n\n    private DetachAudioNode = (): void => {\n        if (!this.isAudioNodeDetached) {\n            this.isAudioNodeDetached = true;\n            if (this.audioNode) {\n                this.audioNode.Detach();\n            }\n        }\n    }\n\n    private OnEvent = (event: SpeechRecognitionEvent): void => {\n        this.serviceTelemetryListener.OnEvent(event);\n        Events.Instance.OnEvent(event);\n        if (this.onEventCallback) {\n            this.onEventCallback(event);\n        }\n    }\n}\n\ninterface ITurnStartResponse {\n    context: ITurnStartContext;\n}\n\ninterface ITurnStartContext {\n    serviceTag: string;\n}\n","import {\n    ConnectionMessage,\n    Deferred,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    MessageType,\n    Promise,\n    RawWebsocketMessage,\n} from \"../../common/Exports\";\n\nconst CRLF: string = \"\\r\\n\";\n\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    public ToConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\n        const deferral = new Deferred<ConnectionMessage>();\n\n        try {\n            if (message.MessageType === MessageType.Text) {\n                const textMessage: string = message.TextContent;\n                let headers: IStringDictionary<string> = {};\n                let body: string = null;\n\n                if (textMessage) {\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n                    if (headerBodySplit && headerBodySplit.length > 0) {\n                        headers = this.ParseHeaders(headerBodySplit[0]);\n                        if (headerBodySplit.length > 1) {\n                            body = headerBodySplit[1];\n                        }\n                    }\n                }\n\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\n            } else if (message.MessageType === MessageType.Binary) {\n                const binaryMessage: ArrayBuffer = message.BinaryContent;\n                let headers: IStringDictionary<string> = {};\n                let body: ArrayBuffer = null;\n\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\n                }\n\n                const dataView = new DataView(binaryMessage);\n                const headerLength = dataView.getInt16(0);\n\n                if (binaryMessage.byteLength < headerLength + 2) {\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\n                }\n\n                let headersString = \"\";\n                for (let i = 0; i < headerLength; i++) {\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\n                }\n\n                headers = this.ParseHeaders(headersString);\n\n                if (binaryMessage.byteLength > headerLength + 2) {\n                    body = binaryMessage.slice(2 + headerLength);\n                }\n\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\n            }\n        } catch (e) {\n            deferral.Reject(`Error formatting the message. Error: ${e}`);\n        }\n\n        return deferral.Promise();\n    }\n\n    public FromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.MessageType === MessageType.Text) {\n                const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\n\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\n\n            } else if (message.MessageType === MessageType.Binary) {\n                const headersString = this.MakeHeaders(message);\n                const content = message.BinaryBody;\n\n                const fr = new FileReader();\n\n                fr.onload = () => {\n                    const headerInt8Array = new Int8Array(fr.result);\n\n                    const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\n                    const dataView = new DataView(payload);\n\n                    dataView.setInt16(0, headerInt8Array.length);\n\n                    for (let i = 0; i < headerInt8Array.byteLength; i++) {\n                        dataView.setInt8(2 + i, headerInt8Array[i]);\n                    }\n\n                    if (content) {\n                        const bodyInt8Array = new Int8Array(content);\n                        for (let i = 0; i < bodyInt8Array.byteLength; i++) {\n                            dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\n                        }\n                    }\n\n                    deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\n                };\n\n                fr.onerror = () => {\n                    deferral.Reject(\"failed to load headers into file reader\");\n                };\n\n                fr.readAsArrayBuffer(new Blob([headersString]));\n            }\n        } catch (e) {\n            deferral.Reject(`Error formatting the message. ${e}`);\n        }\n\n        return deferral.Promise();\n    }\n\n    private MakeHeaders = (message: ConnectionMessage): string => {\n        let headersString: string = \"\";\n\n        if (message.Headers) {\n            for (const header in message.Headers) {\n                if (header) {\n                    headersString += `${header}: ${message.Headers[header]}${CRLF}`;\n                }\n            }\n        }\n\n        return headersString;\n    }\n\n    private ParseHeaders = (headersString: string): IStringDictionary<string> => {\n        const headers: IStringDictionary<string> = {};\n\n        if (headersString) {\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\n            if (headers) {\n                for (const header of headerMatches) {\n                    if (header) {\n                        const seperatorIndex = header.indexOf(\":\");\n                        const headerName = seperatorIndex > 0 ? header.substr(0, seperatorIndex).trim().toLowerCase() : header;\n                        const headerValue =\n                            seperatorIndex > 0 && header.length > (seperatorIndex + 1) ?\n                                header.substr(seperatorIndex + 1).trim() :\n                                \"\";\n\n                        headers[headerName] = headerValue;\n                    }\n                }\n            }\n        }\n\n        return headers;\n    }\n}\n","\n// IMPORTANT - Dont publish internal modules.\n\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\nexport * from \"./CognitiveTokenAuthentication\";\nexport * from \"./IAuthentication\";\nexport * from \"./IConnectionFactory\";\nexport * from \"./RecognitionEvents\";\nexport * from \"./Recognizer\";\nexport * from \"./RecognizerConfig\";\nexport * from \"./SpeechResults\";\nexport * from \"./WebsocketMessageFormatter\";\n","import { WebsocketConnection } from \"../../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary,\n    Promise,\n    Storage,\n} from \"../../common/Exports\";\nimport {\n    AuthInfo,\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    SpeechResultFormat,\n    WebsocketMessageFormatter,\n} from \"../speech/Exports\";\n\nconst TestHooksParamName: string = \"testhooks\";\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\n\nexport class SpeechConnectionFactory implements IConnectionFactory {\n\n    public Create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint = \"\";\n        switch (config.RecognitionMode) {\n            case RecognitionMode.Conversation:\n                endpoint = this.Host + this.ConversationRelativeUri;\n                break;\n            case RecognitionMode.Dictation:\n                endpoint = this.Host + this.DictationRelativeUri;\n                break;\n            default:\n                endpoint = this.Host + this.InteractiveRelativeUri; // default is interactive\n                break;\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            format: SpeechResultFormat[config.Format].toString().toLowerCase(),\n            language: config.Language,\n        };\n\n        if (this.IsDebugModeEnabled) {\n            queryParams[TestHooksParamName] = \"1\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[authInfo.HeaderName] = authInfo.Token;\n        headers[ConnectionIdHeader] = connectionId;\n\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\n    }\n\n    private get Host(): string {\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\n    }\n\n    private get InteractiveRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\n    }\n\n    private get ConversationRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\n    }\n\n    private get DictationRelativeUri(): string {\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\n    }\n\n    private get IsDebugModeEnabled(): boolean {\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\n        return value.toLowerCase() === \"true\";\n    }\n}\n","import { MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { IAudioSource, Promise, Storage } from \"../../common/Exports\";\nimport { IAuthentication, Recognizer, RecognizerConfig } from \"../speech/Exports\";\nimport { SpeechConnectionFactory } from \"./SpeechConnectionFactory\";\n\nconst CreateRecognizer = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\n    return CreateRecognizerWithPcmRecorder(\n        recognizerConfig,\n        authentication);\n};\n\nconst CreateRecognizerWithPcmRecorder = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\n    return CreateRecognizerWithCustomAudioSource(\n        recognizerConfig,\n        authentication,\n        new MicAudioSource(new PcmRecorder()));\n};\n\nconst CreateRecognizerWithCustomAudioSource = (recognizerConfig: RecognizerConfig, authentication: IAuthentication, audioSource: IAudioSource): Recognizer =>  {\n    return new Recognizer (\n        authentication,\n        new SpeechConnectionFactory(),\n        audioSource,\n        recognizerConfig);\n};\n\nexport { CreateRecognizer, CreateRecognizerWithPcmRecorder,  CreateRecognizerWithCustomAudioSource };\n","\nexport * from \"./Recognizer\";\nexport * from \"./SpeechConnectionFactory\";\n","import { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\nimport { Events, Storage } from \"./src/common/Exports\";\n\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\nEvents.Instance.AttachListener(new ConsoleLoggingListener());\n\nexport * from \"./src/common/Exports\";\nexport * from \"./src/common.browser/Exports\";\nexport * from \"./src/sdk/speech/Exports\";\nexport * from \"./src/sdk/speech.browser/Exports\";\n"]}