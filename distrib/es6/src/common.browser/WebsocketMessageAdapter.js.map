{"version":3,"sources":["src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","file":"WebsocketMessageAdapter.js","sourcesContent":["import {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    SendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n\r\n    private connectionState: ConnectionState;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private websocketClient: WebSocket;\r\n\r\n    private sendMessageQueue: Queue<ISendItem>;\r\n    private receivingMessageQueue: Queue<ConnectionMessage>;\r\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private disconnectDeferral: Deferred<boolean>;\r\n    private connectionEvents: EventSource<ConnectionEvent>;\r\n    private connectionId: string;\r\n    private uri: string;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.connectionEvents = new EventSource<ConnectionEvent>();\r\n        this.connectionId = connectionId;\r\n        this.messageFormatter = messageFormatter;\r\n        this.connectionState = ConnectionState.None;\r\n        this.uri = uri;\r\n    }\r\n\r\n    public get State(): ConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        if (this.connectionEstablishDeferral) {\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.websocketClient = new WebSocket(this.uri);\r\n        this.receivingMessageQueue = new Queue<ConnectionMessage>();\r\n        this.disconnectDeferral = new Deferred<boolean>();\r\n        this.sendMessageQueue = new Queue<ISendItem>();\r\n        this.ProcessSendQueue();\r\n\r\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\r\n\r\n        this.websocketClient.onopen = (e: Event) => {\r\n            this.connectionState = ConnectionState.Connected;\r\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\r\n        };\r\n\r\n        this.websocketClient.onerror = (e: Event) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.connectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.websocketClient.onclose = (e: CloseEvent) => {\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                this.connectionState = ConnectionState.Disconnected;\r\n                this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.OnClose(e.code, e.reason);\r\n        };\r\n\r\n        this.websocketClient.onmessage = (e: MessageEvent) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.connectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\r\n                if (e.data instanceof Blob) {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = (le: Event) => {\r\n                        const rawMessage = new RawWebsocketMessage(MessageType.Binary, fileReader.result);\r\n                        this.messageFormatter\r\n                            .ToConnectionMessage(rawMessage)\r\n                            .On((connectionMessage: ConnectionMessage) => {\r\n                                this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                                deferred.Resolve(connectionMessage);\r\n                            }, (error: string) => {\r\n                                // TODO: Events for these ?\r\n                                deferred.Reject(`Invalid binary message format. Error: ${error}`);\r\n                            });\r\n                    };\r\n                    fileReader.onerror = (ev: Event) => {\r\n                        // TODO: Events for these ?\r\n                        deferred.Reject(\"Binary message parse error\");\r\n                    };\r\n\r\n                    fileReader.readAsArrayBuffer(e.data);\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.connectionEstablishDeferral.Promise();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\r\n\r\n        this.messageFormatter\r\n            .FromConnectionMessage(message)\r\n            .On((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.Resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    SendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.Promise();\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        return this.receivingMessageQueue.Dequeue();\r\n    }\r\n\r\n    public Close = (reason?: string): Promise<boolean> => {\r\n        if (this.websocketClient) {\r\n            if (this.connectionState !== ConnectionState.Connected) {\r\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.Resolve(true);\r\n            return deferral.Promise();\r\n        }\r\n\r\n        return this.disconnectDeferral.Promise();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionEvents;\r\n    }\r\n\r\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\r\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\r\n            return PromiseHelper.FromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private OnClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.disconnectDeferral.Resolve(true);\r\n        this.receivingMessageQueue.Dispose(reason);\r\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private ProcessSendQueue = (): void => {\r\n        this.sendMessageQueue\r\n            .Dequeue()\r\n            .On((sendItem: ISendItem) => {\r\n                this.SendRawMessage(sendItem)\r\n                    .On((result: boolean) => {\r\n                        sendItem.SendStatusDeferral.Resolve(result);\r\n                        this.ProcessSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.SendStatusDeferral.Reject(sendError);\r\n                        this.ProcessSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: ConnectionEvent): void => {\r\n        this.connectionEvents.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n"]}