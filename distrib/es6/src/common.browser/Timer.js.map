{"version":3,"sources":["src/common.browser/Timer.ts"],"names":[],"mappings":"AAEA,MAAM;IAIF,YAAY,eAAuB,EAAE,eAAoB;QAIlD,UAAK,GAAG,CAAC,GAAG,MAAa;YAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAClF,CAAC,CAAA;QAEM,SAAI,GAAG;YACV,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAA;QAZG,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;CAWJ","file":"Timer.js","sourcesContent":["import { ITimer } from \"../common/Exports\";\r\n\r\nexport class Timer implements ITimer {\r\n    private delayInMillisec: number;\r\n    private timerId: number;\r\n    private successCallback: any;\r\n    constructor(delayInMillisec: number, successCallback: any) {\r\n        this.delayInMillisec = delayInMillisec;\r\n        this.successCallback = successCallback;\r\n    }\r\n    public start = (...params: any[]): void => {\r\n        if (this.timerId) {\r\n            this.stop();\r\n        }\r\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\r\n    }\r\n\r\n    public stop = (): void => {\r\n        clearTimeout(this.timerId);\r\n    }\r\n}\r\n"]}