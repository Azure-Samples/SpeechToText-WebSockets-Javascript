{"version":3,"sources":["src/common.browser/WebsocketConnection.ts"],"names":[],"mappings":"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","file":"WebsocketConnection.js","sourcesContent":["import {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    PlatformEvent,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private uri: string;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private connectionMessageAdapter: WebsocketMessageAdapter;\r\n    private id: string;\r\n    private isDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.messageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.uri = uri + queryParams;\r\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\r\n\r\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.uri,\r\n            this.Id,\r\n            this.messageFormatter);\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n\r\n        if (this.connectionMessageAdapter) {\r\n            this.connectionMessageAdapter.Close();\r\n        }\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public State = (): ConnectionState => {\r\n        return this.connectionMessageAdapter.State;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.connectionMessageAdapter.Open();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        return this.connectionMessageAdapter.Send(message);\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        return this.connectionMessageAdapter.Read();\r\n    }\r\n\r\n    public get Events(): EventSource<ConnectionEvent> {\r\n        return this.connectionMessageAdapter.Events;\r\n    }\r\n}\r\n"]}