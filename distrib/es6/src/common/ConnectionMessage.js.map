{"version":3,"sources":["src/common/ConnectionMessage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AAG1C,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,6CAAI,CAAA;IACJ,iDAAM,CAAA;AACV,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAED,MAAM;IAQF,YACI,WAAwB,EACxB,IAAS,EACT,OAAmC,EACnC,EAAW;QARP,SAAI,GAAQ,IAAI,CAAC;QAUrB,EAAE,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5E,MAAM,IAAI,qBAAqB,CAAC,0BAA0B,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,YAAY,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/E,MAAM,IAAI,qBAAqB,CAAC,6BAA6B,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;QACtC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAC3C,CAAC;IAED,IAAW,WAAW;QAClB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,OAAO;QACd,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,IAAI;QACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,QAAQ;QACf,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,qBAAqB,CAAC,kCAAkC,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAc,CAAC;IAC/B,CAAC;IAED,IAAW,UAAU;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,qBAAqB,CAAC,gCAAgC,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,EAAE;QACT,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;CACJ","file":"ConnectionMessage.js","sourcesContent":["import { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private messageType: MessageType;\r\n    private headers: IStringDictionary<string>;\r\n    private body: any = null;\r\n\r\n    private id: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.body = body;\r\n        this.headers = headers ? headers : {};\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Headers(): any {\r\n        return this.headers;\r\n    }\r\n\r\n    public get Body(): any {\r\n        return this.body;\r\n    }\r\n\r\n    public get TextBody(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.body as string;\r\n    }\r\n\r\n    public get BinaryBody(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.body;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n"]}