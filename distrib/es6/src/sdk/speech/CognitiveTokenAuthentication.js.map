{"version":3,"sources":["src/sdk/speech/CognitiveTokenAuthentication.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAA0B,MAAM,sBAAsB,CAAC;AACjF,OAAO,EAAE,QAAQ,EAAmB,MAAM,mBAAmB,CAAC;AAE9D,MAAM,UAAU,GAAW,eAAe,CAAC;AAE3C,MAAM;IAIF,YAAY,aAA4D,EAAE,qBAAoE;QAavI,UAAK,GAAG,CAAC,gBAAwB;YACpC,MAAM,CAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,KAAa,KAAK,IAAI,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;QAC3H,CAAC,CAAA;QAEM,kBAAa,GAAG,CAAC,gBAAwB;YAC5C,MAAM,CAAE,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,CAAC,KAAa,KAAK,IAAI,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;QACnI,CAAC,CAAA;QAlBG,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,iBAAiB,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACvD,CAAC;CASJ","file":"CognitiveTokenAuthentication.js","sourcesContent":["import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.fetchCallback = fetchCallback;\r\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n}\r\n"]}