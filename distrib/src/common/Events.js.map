{"version":3,"sources":["../src/common/Events.ts"],"names":[],"mappings":";;AAAA,iCAA4C;AAC5C,6CAA4C;AAI5C;IAAA;IAcA,CAAC;IAHG,sBAAkB,kBAAQ;aAA1B;YACI,OAAO,MAAM,CAAC,QAAQ,CAAC;QAC3B,CAAC;;;OAAA;IAZc,eAAQ,GAAgC,IAAI,yBAAW,EAAiB,CAAC;IAE1E,qBAAc,GAAG,UAAC,WAAwC;QACpE,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,IAAI,yBAAiB,CAAC,aAAa,CAAC,CAAC;SAC9C;QAED,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;IAClC,CAAC,CAAA;IAKL,aAAC;CAdD,AAcC,IAAA;AAdY,wBAAM","file":"Events.js","sourcesContent":["import { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.instance = eventSource;\r\n    }\r\n\r\n    public static get Instance(): IEventSource<PlatformEvent> {\r\n        return Events.instance;\r\n    }\r\n}\r\n"]}