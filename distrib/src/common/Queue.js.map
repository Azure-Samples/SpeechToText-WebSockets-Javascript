{"version":3,"sources":["../src/common/Queue.ts"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["import { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\r\n\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    Enqueue(item: TItem): void;\r\n    EnqueueFromPromise(promise: Promise<TItem>): void;\r\n    Dequeue(): Promise<TItem>;\r\n    Peek(): Promise<TItem>;\r\n    Length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private list: List<TItem>;\r\n    private detachables: IDetachable[];\r\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private isDrainInProgress: boolean = false;\r\n    private isDisposing: boolean = false;\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.list = list ? list : new List<TItem>();\r\n        this.detachables = [];\r\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.detachables.push(this.list.OnAdded(this.Drain));\r\n    }\r\n\r\n    public Enqueue = (item: TItem): void => {\r\n        this.ThrowIfDispose();\r\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\r\n    }\r\n\r\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.ThrowIfDispose();\r\n        this.promiseStore.Add(promise);\r\n        promise.Finally(() => {\r\n            while (this.promiseStore.Length() > 0) {\r\n                if (!this.promiseStore.First().Result().IsCompleted) {\r\n                    break;\r\n                } else {\r\n                    const p = this.promiseStore.RemoveFirst();\r\n                    if (!p.Result().IsError) {\r\n                        this.list.Add(p.Result().Result);\r\n                    } else {\r\n                        // TODO: Log as warning.\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public Dequeue = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n        this.Drain();\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Peek = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n        this.Drain();\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDispose();\r\n        return this.list.Length();\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.subscribers == null;\r\n    }\r\n\r\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n        if (!this.IsDisposed() && !this.isDisposing) {\r\n            this.disposeReason = reason;\r\n            this.isDisposing = true;\r\n            while (this.subscribers.Length() > 0) {\r\n                const subscriber = this.subscribers.RemoveFirst();\r\n                // TODO: this needs work (Resolve(null) instead?).\r\n                subscriber.deferral.Reject(\"Disposed\");\r\n            }\r\n\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\r\n                return PromiseHelper\r\n                    .WhenAll(this.promiseStore.ToArray())\r\n                    .ContinueWith(() => {\r\n                        this.subscribers = null;\r\n                        this.list.ForEach((item: TItem, index: number): void => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.list = null;\r\n                        return true;\r\n                    });\r\n            } else {\r\n                this.subscribers = null;\r\n                this.list = null;\r\n            }\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        this.DrainAndDispose(null, reason);\r\n    }\r\n\r\n    private Drain = (): void => {\r\n        if (!this.isDrainInProgress && !this.isDisposing) {\r\n            this.isDrainInProgress = true;\r\n\r\n            while (this.list.Length() > 0 && this.subscribers.Length() > 0 && !this.isDisposing) {\r\n                const subscriber = this.subscribers.RemoveFirst();\r\n                if (subscriber.type === SubscriberType.Peek) {\r\n                    subscriber.deferral.Resolve(this.list.First());\r\n                } else {\r\n                    const dequeuedItem = this.list.RemoveFirst();\r\n                    subscriber.deferral.Resolve(dequeuedItem);\r\n                }\r\n            }\r\n\r\n            this.isDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private ThrowIfDispose = (): void => {\r\n        if (this.IsDisposed()) {\r\n            if (this.disposeReason) {\r\n                throw new InvalidOperationError(this.disposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.isDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n"]}