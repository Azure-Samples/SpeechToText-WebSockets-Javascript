{"version":3,"sources":["../src/common/List.ts"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["import { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    Get(itemIndex: number): TItem;\r\n    First(): TItem;\r\n    Last(): TItem;\r\n\r\n    Add(item: TItem): void;\r\n    InsertAt(index: number, item: TItem): void;\r\n\r\n    RemoveFirst(): TItem;\r\n    RemoveLast(): TItem;\r\n    RemoveAt(index: number): TItem;\r\n    Remove(index: number, count: number): TItem[];\r\n    Clear(): void;\r\n\r\n    Length(): number;\r\n\r\n    OnAdded(addedCallback: () => void): IDetachable;\r\n    OnRemoved(removedCallback: () => void): IDetachable;\r\n    OnDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    Join(seperator?: string): string;\r\n\r\n    ToArray(): TItem[];\r\n\r\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    All(callback: (item: TItem) => boolean): boolean;\r\n    ForEach(callback: (item: TItem, index: number) => void): void;\r\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    Clone(): List<TItem>;\r\n    Concat(list: List<TItem>): List<TItem>;\r\n    ConcatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private list: TItem[];\r\n    private subscriptionIdCounter: number = 0;\r\n    private addSubscriptions: IStringDictionary<() => void> = {};\r\n    private removeSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.list = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.list.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Get = (itemIndex: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.list[itemIndex];\r\n    }\r\n\r\n    public First = (): TItem => {\r\n        return this.Get(0);\r\n    }\r\n\r\n    public Last = (): TItem => {\r\n        return this.Get(this.Length() - 1);\r\n    }\r\n\r\n    public Add = (item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        this.InsertAt(this.list.length, item);\r\n    }\r\n\r\n    public InsertAt = (index: number, item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        if (index === 0) {\r\n            this.list.unshift(item);\r\n        } else if (index === this.list.length) {\r\n            this.list.push(item);\r\n        } else {\r\n            this.list.splice(index, 0, item);\r\n        }\r\n        this.TriggerSubscriptions(this.addSubscriptions);\r\n    }\r\n\r\n    public RemoveFirst = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(0);\r\n    }\r\n\r\n    public RemoveLast = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(this.Length() - 1);\r\n    }\r\n\r\n    public RemoveAt = (index: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.Remove(index, 1)[0];\r\n    }\r\n\r\n    public Remove = (index: number, count: number): TItem[] => {\r\n        this.ThrowIfDisposed();\r\n        const removedElements = this.list.splice(index, count);\r\n        this.TriggerSubscriptions(this.removeSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public Clear = (): void => {\r\n        this.ThrowIfDisposed();\r\n        this.Remove(0, this.Length());\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.length;\r\n    }\r\n\r\n    public OnAdded = (addedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.addSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.addSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.removeSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.removeSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.disposedSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public Join = (seperator?: string): string => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.join(seperator);\r\n    }\r\n\r\n    public ToArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.list.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        if (callback) {\r\n            return this.Where(callback).Length() > 0;\r\n        } else {\r\n            return this.Length() > 0;\r\n        }\r\n    }\r\n\r\n    public All = (callback: (item: TItem) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        return this.Where(callback).Length() === this.Length();\r\n    }\r\n\r\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.ThrowIfDisposed();\r\n        for (let i = 0; i < this.Length(); i++) {\r\n            callback(this.list[i], i);\r\n        }\r\n    }\r\n\r\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.ThrowIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            selectList.push(callback(this.list[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            if (callback(this.list[i], i)) {\r\n                filteredList.Add(this.list[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const clonedArray = this.ToArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public Clone = (): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.ToArray());\r\n    }\r\n\r\n    public Concat = (list: List<TItem>): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(list.ToArray()));\r\n    }\r\n\r\n    public ConcatArray = (array: TItem[]): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(array));\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.list == null;\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        if (!this.IsDisposed()) {\r\n            this.disposeReason = reason;\r\n            this.list = null;\r\n            this.addSubscriptions = null;\r\n            this.removeSubscriptions = null;\r\n            this.TriggerSubscriptions(this.disposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private ThrowIfDisposed = (): void => {\r\n        if (this.IsDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\r\n        }\r\n    }\r\n\r\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}