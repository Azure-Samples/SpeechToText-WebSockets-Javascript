{"version":3,"sources":["../src/common/EventSource.ts"],"names":[],"mappings":";;AAAA,iCAA8C;AAC9C,+BAA0C;AAM1C;IAKI,qBAAY,QAAoC;QAAhD,iBAEC;QANO,mBAAc,GAA+C,EAAE,CAAC;QAEhE,eAAU,GAAY,KAAK,CAAC;QAM7B,YAAO,GAAG,UAAC,KAAa;YAC3B,IAAI,KAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,MAAM,CAAC,IAAI,2BAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;aAClD;YAED,IAAI,KAAI,CAAC,QAAQ,EAAE;gBACf,KAAK,IAAM,SAAS,IAAI,KAAI,CAAC,QAAQ,EAAE;oBACnC,IAAI,SAAS,EAAE;wBACX,IAAI,KAAK,CAAC,QAAQ,EAAE;4BAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gCAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;6BACxD;yBACJ;qBACJ;iBACJ;aACJ;YAED,KAAK,IAAM,OAAO,IAAI,KAAI,CAAC,cAAc,EAAE;gBACvC,IAAI,OAAO,IAAI,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;oBACzC,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;iBACvC;aACJ;QACL,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,eAAwC;YACrD,IAAM,EAAE,GAAG,uBAAgB,EAAE,CAAC;YAC9B,KAAI,CAAC,cAAc,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC;YAC1C,OAAO;gBACH,MAAM,EAAE;oBACJ,OAAO,KAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBACnC,CAAC;aACJ,CAAC;QACN,CAAC,CAAA;QAEM,mBAAc,GAAG,UAAC,QAAgC;YACrD,OAAO,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAA;QAEM,eAAU,GAAG;YAChB,OAAO,KAAI,CAAC,UAAU,CAAC;QAC3B,CAAC,CAAA;QAEM,YAAO,GAAG;YACb,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,CAAC,CAAA;QAhDG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAiDD,sBAAW,iCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IACL,kBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,kCAAW","file":"EventSource.js","sourcesContent":["import { ObjectDisposedError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private metadata: IStringDictionary<string>;\r\n    private isDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.metadata = metadata;\r\n    }\r\n\r\n    public OnEvent = (event: TEvent): void => {\r\n        if (this.IsDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.Metadata) {\r\n            for (const paramName in this.Metadata) {\r\n                if (paramName) {\r\n                    if (event.Metadata) {\r\n                        if (!event.Metadata[paramName]) {\r\n                            event.Metadata[paramName] = this.Metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.eventListeners) {\r\n            if (eventId && this.eventListeners[eventId]) {\r\n                this.eventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = CreateNoDashGuid();\r\n        this.eventListeners[id] = onEventCallback;\r\n        return {\r\n            Detach: () => {\r\n                delete this.eventListeners[id];\r\n            },\r\n        };\r\n    }\r\n\r\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.Attach(listener.OnEvent);\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.eventListeners = null;\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n"]}