{"version":3,"sources":["../src/sdk/speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"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","file":"SpeechConnectionMessage.Internal.js","sourcesContent":["import {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    IStringDictionary,\r\n    MessageType,\r\n} from \"../../common/Exports\";\r\n\r\nconst PathHeaderName: string = \"path\";\r\nconst ContentTypeHeaderName: string = \"content-type\";\r\nconst RequestIdHeaderName: string = \"x-requestid\";\r\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private path: string;\r\n    private requestId: string;\r\n    private contentType: string;\r\n    private additionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[PathHeaderName] = path;\r\n        headers[RequestIdHeaderName] = requestId;\r\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[ContentTypeHeaderName] = contentType;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.path = path;\r\n        this.requestId = requestId;\r\n        this.contentType = contentType;\r\n        this.additionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get Path(): string {\r\n        return this.path;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get ContentType(): string {\r\n        return this.contentType;\r\n    }\r\n\r\n    public get AdditionalHeaders(): IStringDictionary<string> {\r\n        return this.additionalHeaders;\r\n    }\r\n\r\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.Headers) {\r\n            for (const headerName in message.Headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                        path = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                        requestId = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                        requestTimestamp = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                        contentType = message.Headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.Headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.MessageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.Body,\r\n            additionalHeaders,\r\n            message.Id);\r\n    }\r\n}\r\n"]}