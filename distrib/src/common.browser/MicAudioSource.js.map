{"version":3,"sources":["../src/common.browser/MicAudioSource.ts"],"names":[],"mappings":"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","file":"MicAudioSource.js","sourcesContent":["import {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigatorUserMedia extends NavigatorUserMedia {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<AudioSourceEvent>;\r\n\r\n    private initializeDeferral: Deferred<boolean>;\r\n\r\n    private recorder: IRecorder;\r\n\r\n    private mediaStream: MediaStream;\r\n\r\n    private context: AudioContext;\r\n\r\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource<AudioSourceEvent>();\r\n        this.recorder = recorder;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (this.initializeDeferral) {\r\n            return this.initializeDeferral.Promise();\r\n        }\r\n\r\n        this.initializeDeferral = new Deferred<boolean>();\r\n\r\n        this.CreateAudioContext();\r\n\r\n        const nav = window.navigator as INavigatorUserMedia;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.initializeDeferral.Reject(errorMsg);\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n                getUserMedia(\r\n                    { audio: true, video: false },\r\n                    (mediaStream: MediaStream) => {\r\n                        this.mediaStream = mediaStream;\r\n                        this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n                        this.initializeDeferral.Resolve(true);\r\n                    }, (error: MediaStreamError) => {\r\n                        const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                        const tmp = this.initializeDeferral;\r\n                        // HACK: this should be handled through onError callbacks of all promises up the stack.\r\n                        // Unfortunately, the current implementation does not provide an easy way to reject promises\r\n                        // without a lot of code replication.\r\n                        // TODO: fix promise implementation, allow for a graceful reject chaining.\r\n                        this.initializeDeferral = null;\r\n                        tmp.Reject(errorMsg); // this will bubble up through the whole chain of promises,\r\n                        // with each new level adding extra \"Unhandled callback error\" prefix to the error message.\r\n                        // The following line is not guaranteed to be executed.\r\n                        this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\r\n                    });\r\n            };\r\n\r\n            if (this.context.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.context.resume().then(next, (reason: any) => {\r\n                    this.initializeDeferral.Reject(`Failed to initialize audio context: ${reason}`);\r\n                });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.initializeDeferral.Promise();\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        this.initializeDeferral = null;\r\n\r\n        this.DestroyAudioContext();\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                try {\r\n                    this.recorder.Record(this.context, this.mediaStream, stream);\r\n                } catch (error) {\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\r\n                    throw error;\r\n                }\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n\r\n    private CreateAudioContext = (): void => {\r\n        if (!!this.context) {\r\n            return;\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        const AudioContext = ((window as any).AudioContext)\r\n        || ((window as any).webkitAudioContext)\r\n        || false;\r\n\r\n        if (!AudioContext) {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n\r\n        this.context = new AudioContext();\r\n    }\r\n\r\n    private DestroyAudioContext = (): void => {\r\n        if (!this.context) {\r\n            return;\r\n        }\r\n\r\n        this.recorder.ReleaseMediaResources(this.context);\r\n\r\n        if (\"close\" in this.context) {\r\n            this.context.close();\r\n            this.context = null;\r\n        } else if (this.context.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            this.context.suspend();\r\n        }\r\n    }\r\n}\r\n"]}