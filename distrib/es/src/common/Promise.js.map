{"version":3,"sources":["src/common/Promise.ts"],"names":[],"mappings":"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","file":"Promise.js","sourcesContent":["import { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    Result(): PromiseResult<T>;\r\n\r\n    ContinueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    ContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    Finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    State(): PromiseState;\r\n\r\n    Promise(): IPromise<T>;\r\n\r\n    Resolve(result: T): IDeferred<T>;\r\n\r\n    Reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected isCompleted: boolean;\r\n    protected isError: boolean;\r\n    protected error: string;\r\n    protected result: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.On((result: T) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = false;\r\n                this.result = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = true;\r\n                this.error = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public get IsError(): boolean {\r\n        return this.isError;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n\r\n    public get Result(): T {\r\n        return this.result;\r\n    }\r\n\r\n    public ThrowIfError = (): void => {\r\n        if (this.IsError) {\r\n            throw this.Error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private onSetResult: (result: T) => void;\r\n    private onSetError: (error: string) => void;\r\n\r\n    public SetResult = (result: T): void => {\r\n        this.onSetResult(result);\r\n    }\r\n\r\n    public SetError = (error: string): void => {\r\n        this.onSetError(error);\r\n    }\r\n\r\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.onSetResult = onSetResult;\r\n        this.onSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.Resolve(true);\r\n                } else {\r\n                    deferred.Reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.On((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Resolve(result);\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Reject(error);\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\r\n// TODO: replace with ES6 promises\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n\r\n    private sink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.sink = sink;\r\n    }\r\n\r\n    public Result = (): PromiseResult<T> => {\r\n        return this.sink.Result;\r\n    }\r\n\r\n    public ContinueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.Resolve(continuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}'`);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public ContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Continuation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Continuation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((continuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(continuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}.'`);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public On = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.sink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public Finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.On(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n\r\n    private promise: Promise<T>;\r\n    private sink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.sink = new Sink<T>();\r\n        this.promise = new Promise<T>(this.sink);\r\n    }\r\n\r\n    public State = (): PromiseState => {\r\n        return this.sink.State;\r\n    }\r\n\r\n    public Promise = (): Promise<T> => {\r\n        return this.promise;\r\n    }\r\n\r\n    public Resolve = (result: T): Deferred<T> => {\r\n        this.sink.Resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public Reject = (error: string): Deferred<T> => {\r\n        this.sink.Reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n\r\n    private state: PromiseState = PromiseState.None;\r\n    private promiseResult: PromiseResult<T> = null;\r\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private successHandlers: Array<((result: T) => void)> = [];\r\n    private errorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.promiseResultEvents = new PromiseResultEventSource();\r\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\r\n    }\r\n\r\n    public get State(): PromiseState {\r\n        return this.state;\r\n    }\r\n\r\n    public get Result(): PromiseResult<T> {\r\n        return this.promiseResult;\r\n    }\r\n\r\n    public Resolve = (result: T): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Resolved;\r\n        this.promiseResultEvents.SetResult(result);\r\n\r\n        for (let i = 0; i < this.successHandlers.length; i++) {\r\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public Reject = (error: string): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Rejected;\r\n        this.promiseResultEvents.SetError(error);\r\n\r\n        for (const errorHandler of this.errorHandlers) {\r\n            this.ExecuteErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.state === PromiseState.None) {\r\n            this.successHandlers.push(successCallback);\r\n            this.errorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.state === PromiseState.Resolved) {\r\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\r\n            } else if (this.state === PromiseState.Rejected) {\r\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n    }\r\n\r\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private DetachHandlers = (): void => {\r\n        this.errorHandlers = [];\r\n        this.successHandlers = [];\r\n    }\r\n}\r\n"]}