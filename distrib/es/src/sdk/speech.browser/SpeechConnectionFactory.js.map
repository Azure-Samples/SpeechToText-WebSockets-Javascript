{"version":3,"sources":["src/sdk/speech.browser/SpeechConnectionFactory.ts"],"names":[],"mappings":";;AAAA,wDAAmE;AACnE,gDAK8B;AAC9B,6CAQ2B;AAE3B,IAAM,kBAAkB,GAAW,WAAW,CAAC;AAC/C,IAAM,kBAAkB,GAAW,gBAAgB,CAAC;AAEpD;IAAA;QAAA,iBAwDC;QAtDU,WAAM,GAAG,UACZ,MAAwB,EACxB,QAAkB,EAClB,YAAqB;YAErB,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,MAAM,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC7B,KAAK,yBAAe,CAAC,YAAY;oBAC7B,QAAQ,GAAG,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,uBAAuB,CAAC;oBACpD,KAAK,CAAC;gBACV,KAAK,yBAAe,CAAC,SAAS;oBAC1B,QAAQ,GAAG,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,oBAAoB,CAAC;oBACjD,KAAK,CAAC;gBACV;oBACI,QAAQ,GAAG,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,sBAAsB,CAAC;oBACnD,KAAK,CAAC;YACd,CAAC;YAED,IAAM,WAAW,GAA8B;gBAC3C,MAAM,EAAE,4BAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE;gBAClE,QAAQ,EAAE,MAAM,CAAC,QAAQ;aAC5B,CAAC;YAEF,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAC1B,WAAW,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC;YAC1C,CAAC;YAED,IAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC9C,OAAO,CAAC,kBAAkB,CAAC,GAAG,YAAY,CAAC;YAE3C,MAAM,CAAC,IAAI,6BAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,mCAAyB,EAAE,EAAE,YAAY,CAAC,CAAC;QAClH,CAAC,CAAA;IAsBL,CAAC;IApBG,sBAAY,yCAAI;aAAhB;YACI,MAAM,CAAC,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,gCAAgC,CAAC,CAAC;QAC5E,CAAC;;;OAAA;IAED,sBAAY,2DAAsB;aAAlC;YACI,MAAM,CAAC,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,wBAAwB,EAAE,sDAAsD,CAAC,CAAC;QACpH,CAAC;;;OAAA;IAED,sBAAY,4DAAuB;aAAnC;YACI,MAAM,CAAC,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,yBAAyB,EAAE,uDAAuD,CAAC,CAAC;QACtH,CAAC;;;OAAA;IAED,sBAAY,yDAAoB;aAAhC;YACI,MAAM,CAAC,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAsB,EAAE,oDAAoD,CAAC,CAAC;QAChH,CAAC;;;OAAA;IAED,sBAAY,uDAAkB;aAA9B;YACI,IAAM,KAAK,GAAG,iBAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QAC1C,CAAC;;;OAAA;IACL,8BAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,0DAAuB","file":"SpeechConnectionFactory.js","sourcesContent":["import { WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Promise,\r\n    Storage,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    SpeechResultFormat,\r\n    WebsocketMessageFormatter,\r\n} from \"../speech/Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class SpeechConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint = \"\";\r\n        switch (config.RecognitionMode) {\r\n            case RecognitionMode.Conversation:\r\n                endpoint = this.Host + this.ConversationRelativeUri;\r\n                break;\r\n            case RecognitionMode.Dictation:\r\n                endpoint = this.Host + this.DictationRelativeUri;\r\n                break;\r\n            default:\r\n                endpoint = this.Host + this.InteractiveRelativeUri; // default is interactive\r\n                break;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: SpeechResultFormat[config.Format].toString().toLowerCase(),\r\n            language: config.Language,\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private get Host(): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\r\n    }\r\n\r\n    private get InteractiveRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get ConversationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get DictationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n"]}